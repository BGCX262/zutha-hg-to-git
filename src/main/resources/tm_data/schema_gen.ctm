%prefix zid http://zutha.net/item/
%prefix zsi http://psi.zutha.net/
%prefix zdt http://psi.datatype.zutha.net/
%prefix ztm http://psi.topicmap.zutha.net/

%prefix tmcl http://psi.topicmaps.org/tmcl/
%prefix tmdm http://psi.topicmaps.org/iso13250/model/
%prefix xsd http://www.w3.org/2001/XMLSchema#
%prefix iso http://psi.topicmaps.org/iso13250/

%include ctm_templates.ctm

# ==================== Item Types ====================

# ITEM
zsi:item
    isa zsi:item-type;
    isa zsi:role;
    
    zid:%zid%;
    - zsi:name: "Item";

    plays-role(zsi:abstract-item-type);
    plays-role(zsi:property-declarer);
    has-property(zsi:zid,1,*);
    has-property(zsi:abstract-name,1,*);
    has-property(zsi:name,0,*);
    has-property(zsi:abstract-description,0,1);
    has-property(zsi:description,0,1);
    may-play-role(zsi:scope-item);
    must-play-role(zsi:instance);
.

# REAL ENTITY
zsi:real-entity
    ako zsi:item;
    isa zsi:item-type;

    plays-role(zsi:abstract-item-type);
    zid:%zid%;
    - zsi:name: "Real Entity";
.

# ZUTHA OBJECT
zsi:zutha-object
    ako zsi:item;
    isa zsi:item-type;

    plays-role(zsi:abstract-item-type);
    zid:%zid%;
    - zsi:name: "Zutha Object";
.

# SCHEMA ITEM
zsi:schema-item
    ako zsi:item;
    isa zsi:item-type;

    plays-role(zsi:abstract-item-type);
    zid:%zid%;
    - zsi:name: "Schema Item";
.
# ---------------------- Types of Item Types ----------------------

# ITEM TYPE
zsi:item-type
    ako zsi:item;
    isa zsi:item-type;
    isa zsi:role;

    zid:%zid%;
    tmcl:topic-type;
    - zsi:name: "Item Type";

    may-play-role(zsi:property-declarer);
    may-play-role(zsi:scope-item-type);
    must-play-role(zsi:type);
    must-play-role(zsi:supertype);
    must-play-role(zsi:subtype);
.

# ROLE
zsi:role
    ako zsi:item-type;
    isa zsi:item-type;
    isa zsi:role;

    zid:%zid%;
    tmcl:role;
    - zsi:name: "Role";

    may-play-role(zsi:property-declarer);
.

# CONSTRUCT TYPE
zsi:construct-type
    ako zsi:item-type;
    isa zsi:item-type;
    isa zsi:role;

    zid:%zid%;
    - zsi:name: "Construct Type";

    plays-role(zsi:abstract-item-type);
    plays-role(zsi:property-declarer);
    has-property(zsi:default-permission-level,0,1);
.

# FIELD TYPE
zsi:field-type
    ako zsi:construct-type;
    isa zsi:item-type;
    isa zsi:role;

    zid:%zid%;
    - zsi:name: "Field Type";

    plays-role(zsi:abstract-item-type);
.

# ASSOCIATION TYPE
zsi:association-type
    ako zsi:field-type;
    isa zsi:item-type;
    isa zsi:role;

    zid:%zid%;
    tmcl:association-type;
    - zsi:name: "Association Type";
.

# PROPERTY TYPE
zsi:property-type
    ako zsi:field-type;
    isa zsi:item-type;
    isa zsi:role;

    zid:%zid%;
    tmcl:occurrence-type;
    - zsi:name: "Property Type";

    plays-role(zsi:abstract-item-type);

    #--- a property type cannot declare properties for its instances
    #--- overrides constraint in Item Type
    cannot-play-role(zsi:property-declarer);
.

# AUTO PROPERTY TYPE
zsi:auto-property-type
    ako zsi:property-type;
    isa zsi:item-type;

    zid:%zid%;
    - zsi:name: "Auto Property Type";

    plays-role(zsi:property-declarer);
    has-property(zsi:auto-property-generation-rule,1,1);
    has-property(zsi:auto-property-generation-rule-description,0,1);
.

# ABSTRACT PROPERTY TYPE
zsi:abstract-property-type
    ako zsi:property-type;
    isa zsi:item-type;

    zid:%zid%;
    - zsi:name: "Abstract Property Type";

    must-play-role(zsi:abstract-item-type);
.

# MODIFIABLE PROPERTY TYPE
zsi:modifiable-property-type
    ako zsi:property-type;
    isa zsi:item-type;

    zid:%zid%;
    - zsi:name: "Modifiable Property Type";
.

# FIELD SET TYPE
zsi:field-set-type
    ako zsi:construct-type;
    isa zsi:item-type;

    zid:%zid%;
    - zsi:name: "Field Set Type";

    plays-role(zsi:abstract-item-type);
    #--- a field-set type cannot declare properties for its instances
    #--- overrides constraint in Item Type
    cannot-play-role(zsi:property-declarer);
.

# ---------------------- Construct Types ----------------------

# CONSTRUCT
zsi:construct
    ako zsi:item;
    isa zsi:construct-type;

    zid:%zid%;
    - zsi:name: "Construct";

    plays-role(zsi:abstract-item-type);
    plays-role(zsi:property-declarer);
    may-have-reifier();
    has-property(zsi:permission-level,0,1);

.

# FIELD
zsi:field
    ako zsi:construct;
    isa zsi:field-type;

    zid:%zid%;
    - zsi:name: "Field";

    plays-role(zsi:abstract-item-type);
.

# ASSOCIATION (REIFIED CONSTRUCT)
zsi:association
    ako zsi:field;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Association";

    plays-role(zsi:abstract-item-type);
    must-have-reifier();
    plays-role(zsi:property-declarer);
    has-property(zsi:auto-association-name,1,1);
    has-property(zsi:auto-association-description,1,1);
.

# PROPERTY
zsi:property
    ako zsi:field;
    isa zsi:property-type;

    zid:%zid%;
    - zsi:name: "Property";

    plays-role(zsi:abstract-item-type);
.

# SYSTEM PROPERTY
zsi:system-property
    ako zsi:property;
    isa zsi:property-type;

    zid:%zid%;
    - zsi:name: "System Property";

    plays-role(zsi:abstract-item-type);
    cannot-have-reifier();
.

# ABSTRACT PROPERTY
zsi:abstract-property
    ako zsi:property;
    isa zsi:abstract-property-type;

    zid:%zid%;
    - zsi:name: "Abstract Property";

    plays-role(zsi:abstract-item-type);
.

# USER PROPERTY
zsi:user-property
    ako zsi:property;
    isa zsi:property-type;

    zid:%zid%;
    - zsi:name: "User Property";

    plays-role(zsi:abstract-item-type);
    must-have-reifier();
    plays-role(zsi:property-declarer);
    has-property(zsi:auto-property-name,1,1);
    has-property(zsi:auto-property-description,0,1);
.

# FIELD SET
zsi:field-set
    ako zsi:construct;
    isa zsi:field-set-type;

    zid:%zid%;
    - zsi:name: "Field Set";

    plays-role(zsi:abstract-item-type);
    must-have-reifier();
.

# ASSOCIATION FIELD SET
zsi:association-field-set
    ako zsi:field-set;
    isa zsi:field-set-type;

    zid:%zid%;
    - zsi:name: "Association Field Set";

    plays-role(zsi:property-declarer);
    has-property(zsi:auto-association-field-set-name,1,1);
    has-property(zsi:auto-association-field-set-description,1,1);
.

# PROPERTY SET
zsi:property-set
    ako zsi:field-set;
    isa zsi:field-set-type;

    zid:%zid%;
    - zsi:name: "Property Set";

    plays-role(zsi:property-declarer);
    has-property(zsi:auto-property-set-name,1,1);
    has-property(zsi:auto-property-set-description,1,1);
.

# ==================== Association Types ====================

# TYPE-INSTANCE ASSOCIATION
zsi:type-instance
    ako zsi:association;
    isa zsi:association-type;

    zid:%zid%;
    tmdm:type-instance;
    - zsi:name: "Type Instance";

    has-role(0,*,zsi:type,1,1);
    has-role(1,*,zsi:instance,1,1);
.
zsi:type
    isa zsi:role;

    zid:%zid%;
    tmdm:type;
    - zsi:name: "Type";
.
zsi:instance
    isa zsi:role;

    zid:%zid%;
    tmdm:instance;
    - zsi:name: "Instance";
.

# SUPERTYPE-SUBTYPE ASSOCIATION
zsi:supertype-subtype
    ako zsi:association;
    isa zsi:association-type;

    zid:%zid%;
    tmdm:supertype-subtype;
    - zsi:name: "Supertype Subtype";

    has-role(0,*,zsi:supertype,1,1);
    has-role(0,*,zsi:subtype,1,1);
.
zsi:supertype
    isa zsi:role;

    zid:%zid%;
    tmdm:supertype;
    - zsi:name: "Supertype";
.
zsi:subtype
    isa zsi:role;

    zid:%zid%;
    tmdm:subtype;
    - zsi:name: "Subtype";
.

# ITEM PLAYS ROLE ASSOCIATION
zsi:item-plays-role
    ako zsi:association;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Item Plays Role";
    - zsi:name: "Plays Role" @zsi:item;

    has-role(0,*,zsi:item,1,1);
    has-role(0,*,zsi:role,1,1);
.

# ==================== Property Types ====================

# ABSTRACT NAME PROPERTY
zsi:abstract-name
    ako zsi:abstract-property;
    isa zsi:abstract-property-type;

    zid:%zid%;
    - zsi:name: "Abstract Name";

    plays-role(zsi:abstract-item-type);
    has-datatype(xsd:string);
    has-unique-value();
.

# ABSTRACT DESCRIPTION PROPERTY
zsi:abstract-description
    ako zsi:abstract-property;
    isa zsi:abstract-property-type;

    zid:%zid%;
    - zsi:name: "Abstract Description";

    plays-role(zsi:abstract-item-type);
.

# DESCRIPTION PROPERTY
zsi:description
    ako zsi:abstract-description;
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Description";
.

# AUTO PROPERTY GENERATION RULE PROPERTY
zsi:auto-property-generation-rule
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Auto Property Generation Rule";
    - zsi:name: "Rule" @zsi:auto-property-type;

    has-datatype(xsd:string);
.

# AUTO PROPERTY GENERATION RULE DESCRIPTION PROPERTY
zsi:auto-property-generation-rule-description
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Auto Property Generation Rule Description";
    - zsi:name: "Rule Description" @zsi:auto-property-type;

    has-datatype(xsd:string);
.

# DEFAULT PERMISSION LEVEL PROPERTY
zsi:default-permission-level
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Default Permission Level";

    has-datatype(xsd:integer);
.

# PERMISSION LEVEL PROPERTY
zsi:permission-level
    ako zsi:property;
    isa zsi:property-type;

    zid:%zid%;
    - zsi:name: "Permission Level";

    has-datatype(xsd:integer);
    cannot-have-reifier();
.

# -------------- Auto Properties --------------

# AUTO NAME PROPERTY
#--- implemented with Name of type zsi:auto-name
zsi:auto-name
    ako zsi:name;
    ako zsi:auto-property;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "Auto Name";

    zsi:auto-property-generation-rule: "\"item-\" + this.zid";
.

# AUTO DESCRIPTION PROPERTY
zsi:auto-description
    ako zsi:description;
    ako zsi:auto-property;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "Auto Description";

    plays-role(zsi:abstract-item-type);
.

# AUTO PROPERTY NAME PROPERTY
zsi:auto-property-name
    ako zsi:auto-name;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "Auto Property Name";

    zsi:auto-property-generation-rule: "\"property-\" + this.zid";
.

# AUTO PROPERTY DESCRIPTION PROPERTY
zsi:auto-property-description
    ako zsi:auto-description;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "Auto Property Description";

    zsi:auto-property-generation-rule: "";
.

# AUTO ASSOCIATION NAME PROPERTY
zsi:auto-association-name
    ako zsi:auto-name;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "Auto Association Name";

    zsi:auto-property-generation-rule: "\"association-\" + this.zid";
.

# AUTO ASSOCIATION DESCRIPTION PROPERTY
zsi:auto-association-description
    ako zsi:auto-description;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "Auto Association Description";

    zsi:auto-property-generation-rule: "";
.

# AUTO ASSOCIATION FIELD SET NAME PROPERTY
zsi:auto-association-field-set-name
    ako zsi:auto-name;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "Auto Association Field Set Name";

    zsi:auto-property-generation-rule: "\"association-field-set-\" + this.zid";
.

# AUTO ASSOCIATION FIELD SET DESCRIPTION PROPERTY
zsi:auto-association-field-set-description
    ako zsi:auto-description;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "Auto Association Field Set Description";

    zsi:auto-property-generation-rule: "";
.

# AUTO PROPERTY SET NAME PROPERTY
zsi:auto-property-set-name
    ako zsi:auto-name;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "Auto Property Set Name";

    zsi:auto-property-generation-rule: "\"property-set-\" + this.zid";
.

# AUTO PROPERTY SET DESCRIPTION PROPERTY
zsi:auto-property-set-description
    ako zsi:auto-description;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "Auto Property Set Description";

    zsi:auto-property-generation-rule: "";
.

# -------------- Special Properties --------------
# These properties are not implemented as simple occurrences in
# topic map form

# NAME PROPERTY
#--- implemented with Name of type tmdm:name
zsi:name
    ako zsi:abstract-name;
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Name";
.

# ZID PROPERTY
#--- implemented with subject-identifier with prefix:
#--- http://zutha.net/item/
zsi:zid
    ako zsi:auto-property;
    isa zsi:auto-property-type;

    zid:%zid%;
    - zsi:name: "ZID";

    zsi:auto-property-generation-rule: "newZID()";

    has-datatype(xsd:string);
    has-unique-value();
.

# IDENTIFIER PROPERTY
#--- implemented with subject-identifier with prefix:
#--- http://psi.zutha.net/
#--- also implemented as occurrence so that it can be reified
zsi:identifier
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Identifier";

    has-datatype(xsd:string);
    has-unique-value();
.

# EXTERNAL IDENTIFIER PROPERTY
#--- implemented with subject-identifier
zsi:external-identifier
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "External Identifier";

    has-datatype(xsd:anyURI);
    has-unique-value();
.

# URI PROPERTY
#--- implemented with subject-locator
zsi:uri
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "URI";

    has-datatype(xsd:anyURI);
    has-unique-value();
.

# ***********************************************************
# ***********************************************************
# ******************** Schema Constructs ********************
# ***********************************************************
# ***********************************************************


# ==================== Schema Item Types ====================

# ROLE COMBINATION
zsi:role-combination
    ako zsi:schema-item;
    isa zsi:item-type;
    isa zsi:role;

    zid:%zid%;
    - zsi:name: "Role Combination";
.


# ==================== Schema Association Types ====================

# SCHEMA DECLARATION
zsi:schema-declaration
    ako zsi:association;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Schema Declaration";

    plays-role(zsi:abstract-item-type);
.

# OVERLAP DECLARATION
zsi:overlap-declaration
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Overlap Declaration";
    - zsi:name: "Overlaps" @zsi:item-type;

    has-role(0,*,zsi:item-type,2,2);
.

# ABSTRACT CONSTRAINT
zsi:abstract-constraint
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Abstract Constraint";
    - zsi:name: "Is Abstract" @zsi:abstract-item-type;

    has-role(1,1,zsi:abstract-item-type,1,1);
.

# ITEM TYPE ROLE DECLARATION
zsi:item-type-role-declaration
    ako zsi:field-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Item Type Role Declaration";
    - zsi:name: "Declares Role" @zsi:item-type;
    - zsi:name: "Declared Role of" @zsi:role;

    has-role(0,*,zsi:item-type,1,1);
    has-role(0,*,zsi:role,1,1);
    plays-role(zsi:property-declarer);
    has-property(zsi:role-card-min,1,1);
    has-property(zsi:role-card-max,1,1); #--- 0 or 1
.

# PROPERTY DECLARATION
zsi:property-declaration
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Property Declaration";
    - zsi:name: "Declares Property" @zsi:property-declarer;
    - zsi:name: "Declared Property of" @zsi:property-type;

    has-role(0,*,zsi:property-declarer,1,1);
    has-role(0,*,zsi:property-type,1,1);
    plays-role(zsi:property-declarer);
    has-property(zsi:property-card-min,1,1);
    has-property(zsi:property-card-max,1,1);
.

# PROPERTY DATA TYPE CONSTRAINT
zsi:property-datatype-constraint
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Property Data Type Constraint";
    - zsi:name: "Has Datatype" @zsi:property-type;

    plays-role(zsi:property-declarer);
    has-property(zsi:datatype,1,1);
    has-role(1,1,zsi:property-type,1,1);
.

# ASSOCIATION ROLE CONSTRAINT
zsi:association-role-constraint
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Association Role Constraint";
    - zsi:name: "Has Role" @zsi:association-type;
    - zsi:name: "Takes Part in Association" @zsi:role;

    has-role(0,*,zsi:role,1,1);
    has-role(1,*,zsi:association-type,1,1);
    plays-role(zsi:property-declarer);
    has-property(zsi:role-card-min,1,1);
    has-property(zsi:role-card-max,1,1);
    has-property(zsi:association-card-min,1,1);
    has-property(zsi:association-card-max,1,1);
.

# ROLE COMBINATION CONSTRAINT
zsi:role-combination-constraint
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Role Combination Constraint";
    - zsi:name: "Played by Item Type in Combination With" @zsi:role;
    - zsi:name: "Plays Role in Combination With" @zsi:item-type;
    - zsi:name: "Allows Role Combination" @zsi:role-combination;

    has-role(0,*,zsi:role,1,1);
    has-role(0,*,zsi:item-type,1,1);
    has-role(2,*,zsi:role-combination,1,1);
.
# ASSOCIATION HAS ROLE COMBINATION CONSTRAINT
zsi:association-has-role-combination-constraint
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Association Has Role Combination Constraint";
    - zsi:name: "Constrains Associations of Type" @zsi:role-combination;
    - zsi:name: "May Have Role Combination" @zsi:association-type;

    has-role(0,*,zsi:association-type,1,1);
    has-role(1,1,zsi:role-combination,1,1);
.

# FIELD HAS SCOPE ITEM TYPE CONSTRAINT
zsi:field-has-scope-item-type-constraint
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Field Has Scope Item Type Constraint";
    - zsi:name: "Scope Contains Item(s) of Type" @zsi:field-type;
    - zsi:name: "Field Has Scope Containing Item(s) of this Type" @zsi:scope-item-type;

    plays-role(zsi:property-declarer);
    has-property(zsi:scope-item-card-min,1,1);
    has-property(zsi:scope-item-card-max,1,1);
    has-role(0,*,zsi:field-type,1,1);
    has-role(0,*,zsi:scope-item-type,1,1);
.

# ITEM HAS FIELD WITH SCOPE ITEM CONSTRAINT
zsi:item-has-field-with-scope-item-constraint
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Item has Field with Scope Item Constraint";
    - zsi:name: "Has Field(s) with Scope Item" @zsi:item-type;
    - zsi:name: "Required by Item Type with Scope Item" @zsi:field-type;
    - zsi:name: "Item has Field(s) with this Scope Item" @zsi:scope-item;

    plays-role(zsi:property-declarer);
    has-property(zsi:field-card-min,1,1);
    has-property(zsi:field-card-max,1,1);
    has-role(0,*,zsi:item-type,1,1);
    has-role(0,*,zsi:field-type,1,1);
    has-role(0,*,zsi:scope-item,1,1);
.

# REIFIER CONSTRAINT
zsi:reifier-constraint
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Reifier Constraint";
    - zsi:name: "Has Reifier" @zsi:construct-type;

    plays-role(zsi:property-declarer);
    has-property(zsi:reifier-card-min,1,1);
    has-property(zsi:reifier-card-max,1,1);
    #--- This specifies both the type of the reified construct
    #--- and the type of the reifying item
    has-role(1,1,zsi:construct-type,1,1);
.

# UNIQUE VALUE CONSTRAINT
zsi:unique-value-constraint
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Unique Value Constraint";
    - zsi:name: "Has Unique Value" @zsi:property-type;

    has-role(0,1,zsi:property-type,1,1);
.

# REGULAR EXPRESSION CONSTRAINT
zsi:regular-expression-constraint
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:%zid%;
    - zsi:name: "Regular Expression Constraint";
    - zsi:name: "Matches Regexp" @zsi:property-type;

    plays-role(zsi:property-declarer);
    has-property(zsi:regexp,1,1);
    has-role(0,*,zsi:property-type,1,1);
.

# ==================== Schema Roles ====================

# ABSTRACT ITEM TYPE
zsi:abstract-item-type
    isa zsi:role;

    zid:%zid%;
    - zsi:name: "Abstract Item Type";
.

# PROPERTY DECLARER
zsi:property-declarer
    isa zsi:role;

    zid:%zid%;
    - zsi:name: "Property Declarer";
.

# SCOPE ITEM
zsi:scope-item
    isa zsi:role;

    zid:%zid%;
    - zsi:name: "Scope Item";
.

# SCOPE ITEM TYPE
zsi:scope-item-type
    isa zsi:role;

    zid:%zid%;
    - zsi:name: "Scope Item Type";
.


# ==================== Schema Property Types ====================

# REGEXP
zsi:regexp
    ako zsi:pmodifiable-roperty;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Regular Expression";
    - zsi:name: "regexp" @zsi:constrained-item-type;

    has-datatype(xsd:string);
    tmcl:regexp;
.

# DATA TYPE
zsi:datatype
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Datatype";

    has-datatype(xsd:anyURI);
.

# MIN CARDINALITY
zsi:card-min
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    tmcl:card-min;
    - zsi:name: "Min Cardinality";
    - zsi:name: "Min" @zsi:constrained-item-type;

    has-datatype(xsd:integer);
.

# MAX CARDINALITY
zsi:card-max
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    tmcl:card-max;
    - zsi:name: "Max Cardinality";
    - zsi:name: "Max" @zsi:constrained-item-type;

    has-datatype(iso:ctm-integer);
.

# ROLE MIN CARDINALITY
zsi:role-card-min
    ako zsi:card-min;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Role Min Cardinality";
.

# ROLE MAX CARDINALITY
zsi:role-card-max
    ako zsi:card-max;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Role Max Cardinality";
.

# FIELD MIN CARDINALITY
zsi:field-card-min
    ako zsi:card-min;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Field Min Cardinality";
.

# FIELD MAX CARDINALITY
zsi:association-card-max
    ako zsi:card-max;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Field Max Cardinality";
.

# ASSOCIATION MIN CARDINALITY
zsi:association-card-min
    ako zsi:field-card-min;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Association Min Cardinality";
.

# ASSOCIATION MAX CARDINALITY
zsi:association-card-max
    ako zsi:field-card-max;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Association Max Cardinality";
.

# PROPERTY MIN CARDINALITY
zsi:property-card-min
    ako zsi:field-card-min;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Property Min Cardinality";
.

# PROPERTY MAX CARDINALITY
zsi:property-card-max
    ako zsi:field-card-max;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Property Max Cardinality";
.

# REIFIER MIN CARDINALITY
zsi:reifier-card-min
    ako zsi:card-min;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Reifier Min Cardinality";
.

# REIFIER MAX CARDINALITY
zsi:reifier-card-max
    ako zsi:card-max;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Reifier Max Cardinality";
.

# SCOPE ITEM MIN CARDINALITY
zsi:scope-item-card-min
    ako zsi:card-min;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Scope Item Min Cardinality";
.

# SCOPE ITEM MAX CARDINALITY
zsi:scope-item-card-max
    ako zsi:card-max;
    isa zsi:modifiable-property-type;

    zid:%zid%;
    - zsi:name: "Scope Item Max Cardinality";
.

# ==================== Topic Map Implementation Constructs ====================

# -------------- Constructs to emulate Field Set reification --------------

# FIELD SET REIFICATION ASSOCIATION
ztm:field-set-reification
    isa zsi:association-type;

    - zsi:name: "Field Set Reification";

    has-role(1,1,zsi:field-set,1,1);
    has-role(0,*,zsi:item,1,1);
    has-role(0,*,zsi:field-type,1,1);
.

# PROPERTY SET REIFICATION ASSOCIATION
ztm:property-set-reification
    ako ztm:field-set-reification;
    isa zsi:association-type;

    - zsi:name: "Property Set Reification";

    has-role(1,1,zsi:property-set,1,1);
    has-role(0,*,zsi:property-type,1,1);
.

# ASSOCIATION FIELD SET REIFICATION ASSOCIATION
ztm:association-field-set-reification
    ako ztm:field-set-reification;
    isa zsi:association-type;

    - zsi:name: "Association Field Set Reification";

    has-role(1,1,zsi:association-field-set,1,1);
    has-role(0,*,zsi:association-type,1,1);
    has-role(0,*,zsi:role,1,1);
.
