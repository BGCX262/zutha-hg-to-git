%prefix zid http://zutha.net/item/
%prefix zsi http://psi.zutha.net/
%prefix zdt http://psi.datatype.zutha.net/
%prefix ztm http://psi.topicmap.zutha.net/

%prefix tmcl http://psi.topicmaps.org/tmcl/
%prefix tmdm http://psi.topicmaps.org/iso13250/model/
%prefix xsd http://www.w3.org/2001/XMLSchema#
%prefix iso http://psi.topicmaps.org/iso13250/

%prefix zsi http://psi.zutha.net/
%prefix ztm http://psi.topicmap.zutha.net/

# ==================== General Purpose Templates ====================

# ITEM PROPERTY
def property($item, $propType, $value)
    $item
    $propType: $value.
end

# ITEM PROPERTY WITH PERMISSION
def property($item, $propType, $value, $permLevel)
    ?propReifier isa $propType;
        zsi:permission-level: $permLevel.

    $item
    $propType: $value ~ ?propReifier.
end


# ==================== Schema Templates ====================

# OVERLAP DECLARATION
def overlaps($itemType1, $itemType2)
  zsi:overlap-declaration(zsi:overlapping-item-type : $itemType1,
    zsi:overlapping-item-type : $itemType2)
end

# ABSTRACT CONSTRAINT
def is-abstract($itemType)
    zsi:abstract-constraint(zsi:constrained-item-type: $itemType)
end

# ITEM PROPERTY CONSTRAINT
def has-property($itemType, $propType, $min, $max)
    ?assoc isa zsi:item-property-constraint;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:item-property-constraint(
        zsi:constrained-item-type: $itemType,
        zsi:constrained-property-type: $propType
    ) ~ ?assoc
end

# PROPERTY DATA TYPE CONSTRAINT
def has-datatype($propType, $dataType)
    ?assoc isa zsi:property-datatype-constraint;
        zsi:datatype: $dataType;
    .
    zsi:property-datatype-constraint(
        zsi:constrained-property-type: $propType
    ) ~ ?assoc
end

# ASSOCIATION ROLE CONSTRAINT
def has-role($assocType, $roleType, $min, $max)
    ?assoc isa zsi:item-role-constraint;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:item-role-constraint(
        zsi:constrained-association-type: assocType,
        zsi:constrained-role-type: $roleType
    ) ~ ?assoc
end

# ITEM ROLE CONSTRAINT
def plays-role($itemType, $roleType, $assocType, $min, $max)
    ?assoc isa zsi:item-role-constraint;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:item-role-constraint(
        zsi:constrained-item-type: $itemType,
        zsi:constrained-role-type: $roleType,
        zsi:constrained-association-type: $assocType
    ) ~ ?assoc
end
def role-played-by($assocType, $roleType, $itemType, $min, $max)
    plays-role($itemType, $roleType, $assocType, $min, $max)
end

# ROLE COMBINATION CONSTRAINT
def role-combination($assocType,
        $roleType1,$topicType1,$roleType2,$topicType2)
    ?combo isa zsi:role-combination;
    .
    zsi:association-has-role-combination-constraint(
        zsi:constrained-role-combination: ?combo,
        zsi:constrained-association-type: $assocType
    )
    zsi:role-combination-constraint(
        zsi:allowed-role-combination: ?combo,
        zsi:constrained-role-type: $roleType1,
        zsi:constrained-item-type: $topicType1
    )
    zsi:role-combination-constraint(
        zsi:allowed-role-combination: ?combo,
        zsi:constrained-role-type: $roleType2,
        zsi:constrained-item-type: $topicType2
    )
end

# FIELD HAS SCOPE ITEM TYPE CONSTRAINT
def has-scope($fieldType, $itemType, $min, $max)
    ?assoc isa zsi:field-has-scope-item-type-constraint;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:field-has-scope-item-type-constraint(
        zsi:constrained-field-type: $fieldType,
        zsi:constrained-scope-item-type: $itemType
    ) ~ ?assoc
end

# ITEM HAS FIELD WITH SCOPE ITEM CONSTRAINT
def requires-scope($itemType, $fieldType, $item, $min, $max)
    ?assoc isa zsi:item-has-field-with-scope-item-constraint;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:item-has-field-with-scope-item-constraint(
        zsi:constrained-item-type: $itemType,
        zsi:constrained-field-type: $fieldType,
        zsi:constrained-scope-item: $item
    ) ~ ?assoc
end

# REIFIER CONSTRAINT
#--- Constructs of type $reifiable must be reified
#--- by an item of type $reifiable and vice versa.
def must-have-reifier($reifiable)
    ?assoc isa zsi:reifier-constraint;
        zsi:card-min: 1;
        zsi:card-max: 1;
    .
    zsi:reifier-constraint(
        zsi:constrained-reifiable-construct-type: $reifiable
    ) ~ ?assoc
end
#--- Construct of type $reifiable optionally has a reifier.
#--- If instantiated as an item,
#--- $reifiable must reify a construct of the same type
def may-have-reifier($reifiable)
    ?assoc isa zsi:reifier-constraint;
        zsi:card-min: 0;
        zsi:card-max: 1;
    .
    zsi:reifier-constraint(
        zsi:constrained-reifiable-construct-type: $reifiable
    ) ~ ?assoc
end
#--- reifiable cannot be instantiated
def cannot-have-reifier($reifiable)
    ?assoc isa zsi:reifier-constraint;
        zsi:card-min: 0;
        zsi:card-max: 0;
    .
    zsi:reifier-constraint(
        zsi:constrained-reifiable-construct-type: $reifiable
    ) ~ ?assoc
end


# UNIQUE VALUE CONSTRAINT
def has-unique-value($propType)
    zsi:unique-value-constraint(
        zsi:constrained-property-type: $propType)
end

# REGULAR EXPRESSION CONSTRAINT
def matches-regexp($propType, $regexp)
    ?assoc isa zsi:regular-expression-constraint;
        zsi:regexp: $regexp;
    .
    zsi:regular-expression-constraint(
        zsi:constrained-property-type: $propType
    ) ~ ?assoc
end


# ==================== Item Types ====================

# ITEM
zsi:item
    isa zsi:item-type;

    zid:01;
    - zsi:name: "Item";

    is-abstract();
    has-property(zsi:zid,1,*);
    has-property(zsi:abstract-name,1,*);
    has-property(zsi:name,0,*);
    has-property(zsi:abstract-description,0,1);
    has-property(zsi:description,0,1);
    plays-role(zsi:constrained-scope-item,
        zsi:item-has-field-with-scope-item-constraint,0,*);
.

# ENTITY
zsi:entity
    ako zsi:item;
    isa zsi:entity-type;

    is-abstract();
    zid:02;
    - zsi:name: "Entity";
.

# ---------------------- Types of Item Types ----------------------

# ITEM TYPE
zsi:item-type
    ako zsi:item;
    isa zsi:item-type;

    zid:03;
    tmcl:topic-type;
    - zsi:name: "Item Type";

    plays-role(zsi:overlapping-item-type,
        zsi:overlap-declaraction,0,*);
    plays-role(zsi:constrained-item-type,
        zsi:abstract-constraint,0,1);
    plays-role(zsi:constrained-item-type,
        zsi:item-property-constraint,0,*);
    plays-role(zsi:constrained-item-type,
        zsi:item-role-constraint,0,*);
    plays-role(zsi:constrained-item-type,
        zsi:role-combination-constraint,0,*);
    plays-role(zsi:constrained-scope-item-type,
        zsi:field-has-scope-item-type-constraint,0,*);
    plays-role(zsi:constrained-item-type,
        zsi:item-has-field-with-scope-item-constraint,0,*);
    plays-role(zsi:constrained-item-type,
        zsi:reifier-constraint,0,1);
.

# ENTITY TYPE
zsi:entity-type
    ako zsi:item-type;
    isa zsi:item-type;

    zid:04;
    - zsi:name: "Entity Type";
.

# REIFIABLE CONSTRUCT TYPE
zsi:reifiable-construct-type
    ako zsi:item-type;
    isa zsi:item-type;

    zid:05;
    - zsi:name: "Reifiable Construct Type";

    is-abstract();
    plays-role(zsi:constrained-reifiable-construct-type,
        zsi:reifier-constraint,1,1);
    has-property(zsi:default-permission-level,0,1);
.

# ROLE TYPE
zsi:role-type
    ako zsi:reifiable-construct-type;
    isa zsi:item-type;

    zid:06;
    tmcl:role-type;
    - zsi:name: "Role Type";
    
    plays-role(zsi:constrained-role-type,
        zsi:association-role-constraint,0,*);
    plays-role(zsi:constrained-role-type,
        zsi:item-role-constraint,0,*);
    plays-role(zsi:constrained-role-type,
        zsi:role-combination-constraint,0,*);
    #--- a role type cannot declare properties for its instances
    #--- overrides constraint in Item Type
    plays-role(zsi:constrained-item-type,
        zsi:item-property-constraint,0,0);
.

# FIELD TYPE
zsi:field-type
    ako zsi:reifiable-construct-type;
    isa zsi:item-type;

    zid:07;
    - zsi:name: "Field Type";

    is-abstract();
    plays-role(zsi:constrained-field-type,
        zsi:field-has-scope-item-type-constraint,0,*);
    plays-role(zsi:constrained-field-type,
        zsi:item-has-field-with-scope-item-constraint,0,*);
.

# ASSOCIATION TYPE
zsi:association-type
    ako zsi:field-type;
    isa zsi:item-type;

    zid:08;
    tmcl:association-type;
    - zsi:name: "Association Type";

    plays-role(zsi:constrained-association-type,
        zsi:association-role-constraint,0,*);
    plays-role(zsi:constrained-association-type,
        zsi:item-role-constraint,0,*);
    plays-role(zsi:constrained-construct,
        zsi:scope-constraint,0,*);
.

# PROPERTY TYPE
zsi:property-type
    ako zsi:field-type;
    isa zsi:item-type;

    zid:09;
    tmcl:occurrence-type;
    - zsi:name: "Property Type";

    is-abstract();
    plays-role(zsi:constrained-property-type,
        zsi:item-property-constraint,0,*);
    plays-role(zsi:constrained-property-type,
        zsi:property-datatype-constraint,1,1);
    plays-role(zsi:constrained-property-type,
        zsi:unique-value-constraint,0,1);
    plays-role(zsi:constrained-property-type,
        zsi:regular-expression-constraint,0,*);
    #--- a property type cannot declare properties for its instances
    #--- overrides constraint in Item Type
    plays-role(zsi:constrained-item-type,
        zsi:item-property-constraint,0,0);
.

# AUTO PROPERTY TYPE
zsi:auto-property-type
    ako zsi:property-type;
    isa zsi:item-type;

    zid:0A;
    - zsi:name: "Auto Property Type";

    has-property(zsi:auto-property-generation-rule,1,1);
    has-property(zsi:auto-property-generation-rule-description,0,1);
.

# ABSTRACT PROPERTY TYPE
zsi:abstract-property-type
    ako zsi:property-type;
    isa zsi:item-type;

    zid:0B;
    - zsi:name: "Abstract Property Type";

    plays-role(zsi:constrained-item-type,
        zsi:abstract-constraint,1,1);
.

# MODIFIABLE PROPERTY TYPE
zsi:modifiable-property-type
    ako zsi:property-type;
    isa zsi:item-type;

    zid:0C;
    - zsi:name: "Modifiable Property Type";
.

# FIELD SET TYPE
zsi:field-set-type
    ako zsi:reifiable-construct-type;
    isa zsi:item-type;

    zid:0D;
    - zsi:name: "Field Set Type";

    is-abstract();
    #--- a field-set type cannot declare properties for its instances
    #--- overrides constraint in Item Type
    plays-role(zsi:constrained-item-type,
        zsi:item-property-constraint,0,0);
.

# ASSOCIATION SET TYPE
zsi:association-set-type
    ako zsi:field-set-type;
    isa zsi:item-type;

    zid:0E;
    - zsi:name: "Association Set Type";
.

# PROPERTY SET TYPE
zsi:property-set-type
    ako zsi:field-set-type;
    isa zsi:item-type;

    zid:0F;
    - zsi:name: "Property Set Type";
.
# ---------------------- Reifiable Construct Types ----------------------

# REIFIABLE CONSTRUCT
zsi:reifiable-construct
    ako zsi:item;
    isa zsi:reifiable-construct-type;

    zid:0G;
    - zsi:name: "Reifiable Construct";

    is-abstract();
    may-have-reifier();
    has-property(zsi:permission-level,0,1);

.

# ROLE (REIFIED CONSTRUCT)
zsi:role
    ako zsi:reifiable-construct;
    isa zsi:role-type;

    zid:0H;
    - zsi:name: "Role";

    is-abstract();
    must-have-reifier();
    has-property(zsi:auto-role-name,1,1);
    has-property(zsi:auto-role-description,1,1);
.

# FIELD
zsi:field
    ako zsi:reifiable-construct;
    isa zsi:field-type;

    zid:0J;
    - zsi:name: "Field";

    is-abstract();
.

# ASSOCIATION (REIFIED CONSTRUCT)
zsi:association
    ako zsi:field;
    isa zsi:association-type;

    zid:0K;
    - zsi:name: "Association";

    is-abstract();
    must-have-reifier();
    has-property(zsi:auto-association-name,1,1);
    has-property(zsi:auto-association-description,1,1);
.

# PROPERTY (REIFIED CONSTRUCT)
zsi:property
    ako zsi:field;
    isa zsi:property-type;

    zid:0L;
    - zsi:name: "Property";

    is-abstract();
.

# AUTO PROPERTY PROPERTY
zsi:auto-property
    ako zsi:property;
    isa zsi:auto-property-type;

    zid:0M;
    - zsi:name: "Auto Property";

    is-abstract();
    cannot-have-reifier();
.

# ABSTRACT PROPERTY (REIFIED CONSTRUCT)
zsi:abstract-property
    ako zsi:property;
    isa zsi:abstract-property-type;

    zid:0N;
    - zsi:name: "Abstract Property";

    is-abstract();
.

# MODIFIABLE PROPERTY (REIFIED CONSTRUCT)
zsi:modifiable-property
    ako zsi:property;
    isa zsi:modifiable-property-type;

    zid:0P;
    - zsi:name: "Modifiable Property";

    is-abstract();
    must-have-reifier();
    has-property(zsi:auto-property-name,1,1);
    has-property(zsi:auto-property-description,1,1);
.

# FIELD SET
zsi:field-set
    ako zsi:reifiable-construct;
    isa zsi:field-set-type;

    zid:0Q;
    - zsi:name: "Field Set";

    is-abstract();
    must-have-reifier();
.

# ASSOCIATION SET
zsi:association-set
    ako zsi:field-set;
    isa zsi:association-set-type;

    zid:0R;
    - zsi:name: "Association Set";

    has-property(zsi:auto-association-set-name,1,1);
    has-property(zsi:auto-association-set-description,1,1);
.

# PROPERTY SET
zsi:property-set
    ako zsi:field-set;
    isa zsi:property-set-type;

    zid:0T;
    - zsi:name: "Property Set";

    has-property(zsi:auto-property-set-name,1,1);
    has-property(zsi:auto-property-set-description,1,1);
.

# ==================== Association Types ====================

# TYPE-INSTANCE ASSOCIATION
zsi:type-instance
    ako zsi:association;
    isa zsi:association-type;

    zid:0U;
    tmdm:type-instance;
    - zsi:name: "Type Instance";

    has-role(zsi:type,1,1);
    has-role(zsi:instance,1,1);
.
zsi:type
    ako zsi:role;
    isa zsi:role-type;

    zid:0V;
    tmdm:type;
    - zsi:name: "Type";
.
zsi:instance
    ako zsi:role;
    isa zsi:role-type;

    zid:0W;
    tmdm:instance;
    - zsi:name: "Instance";
.

# SUPERTYPE-SUBTYPE ASSOCIATION
zsi:supertype-subtype
    ako zsi:association;
    isa zsi:association-type;
    
    zid:0X;
    tmdm:supertype-subtype;
    - zsi:name: "Supertype Subtype";

    has-role(zsi:supertype,1,1);
    has-role(zsi:subtype,1,1);
.
zsi:supertype
    ako zsi:role;
    isa zsi:role-type;

    zid:0Y;
    tmdm:supertype;
    - zsi:name: "Supertype";
.
zsi:subtype
    ako zsi:role;
    isa zsi:role-type;

    zid:010;
    tmdm:subtype;
    - zsi:name: "Subtype";
.

# ==================== Property Types ====================

# ABSTRACT NAME PROPERTY
zsi:abstract-name
    ako zsi:abstract-property;
    isa zsi:abstract-property-type;

    zid:011;
    - zsi:name: "Abstract Name";

    is-abstract();
    has-datatype(xsd:string);
    has-unique-value();
.

# ABSTRACT DESCRIPTION PROPERTY
zsi:abstract-description
    ako zsi:abstract-property;
    isa zsi:abstract-property-type;

    zid:012;
    - zsi:name: "Abstract Description";

    is-abstract();
.

# DESCRIPTION PROPERTY
zsi:description
    ako zsi:abstract-description;
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:013;
    - zsi:name: "Description";
.

# AUTO PROPERTY GENERATION RULE PROPERTY
zsi:auto-property-generation-rule
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:014;
    - zsi:name: "Auto Property Generation Rule";
    - zsi:name: "Rule" @zsi:auto-property-type;

    has-datatype(xsd:string);
.

# AUTO PROPERTY GENERATION RULE DESCRIPTION PROPERTY
zsi:auto-property-generation-rule-description
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:015;
    - zsi:name: "Auto Property Generation Rule Description";
    - zsi:name: "Rule Description" @zsi:auto-property-type;

    has-datatype(xsd:string);
.

# DEFAULT PERMISSION LEVEL PROPERTY
zsi:default-permission-level
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:016;
    - zsi:name: "Default Permission Level";

    has-datatype(xsd:integer);
.

# PERMISSION LEVEL PROPERTY
zsi:permission-level
    ako zsi:property;
    isa zsi:property-type;

    zid:017;
    - zsi:name: "Permission Level";

    has-datatype(xsd:integer);
    cannot-have-reifier();
.

# -------------- Auto Properties --------------

# AUTO NAME PROPERTY
#--- implemented with Name of type zsi:auto-name
zsi:auto-name
    ako zsi:name;
    ako zsi:auto-property;
    isa zsi:auto-property-type;

    zid:018;
    - zsi:name: "Auto Name";

    zsi:auto-property-generation-rule: "\"item-\" + this.zid";
.

# AUTO DESCRIPTION PROPERTY
zsi:auto-description
    ako zsi:description;
    ako zsi:auto-property;
    isa zsi:auto-property-type;

    zid:019;
    - zsi:name: "Auto Description";

    is-abstract();
.

# AUTO PROPERTY NAME PROPERTY
zsi:auto-property-name
    ako zsi:auto-name;
    isa zsi:auto-property-type;

    zid:01A;
    - zsi:name: "Auto Property Name";

    zsi:auto-property-generation-rule: "\"property-\" + this.zid";
.

# AUTO PROPERTY DESCRIPTION PROPERTY
zsi:auto-property-description
    ako zsi:auto-description;
    isa zsi:auto-property-type;

    zid:01B;
    - zsi:name: "Auto Property Description";

    zsi:auto-property-generation-rule: "";
.

# AUTO ASSOCIATION NAME PROPERTY
zsi:auto-association-name
    ako zsi:auto-name;
    isa zsi:auto-property-type;

    zid:01C;
    - zsi:name: "Auto Association Name";

    zsi:auto-property-generation-rule: "\"association-\" + this.zid";
.

# AUTO ASSOCIATION DESCRIPTION PROPERTY
zsi:auto-association-description
    ako zsi:auto-description;
    isa zsi:auto-property-type;

    zid:01D;
    - zsi:name: "Auto Association Description";

    zsi:auto-property-generation-rule: "";
.

# AUTO ROLE NAME PROPERTY
zsi:auto-role-name
    ako zsi:auto-name;
    isa zsi:auto-property-type;

    zid:01E;
    - zsi:name: "Auto Role Name";

    zsi:auto-property-generation-rule: "\"role-\" + this.zid";
.

# AUTO ROLE DESCRIPTION PROPERTY
zsi:auto-role-description
    ako zsi:auto-description;
    isa zsi:auto-property-type;

    zid:01F;
    - zsi:name: "Auto Role Description";

    zsi:auto-property-generation-rule: "";
.

# AUTO ASSOCIATION SET NAME PROPERTY
zsi:auto-association-set-name
    ako zsi:auto-name;
    isa zsi:auto-property-type;

    zid:01G;
    - zsi:name: "Auto Association Set Name";

    zsi:auto-property-generation-rule: "\"association-set-\" + this.zid";
.

# AUTO ASSOCIATION SET DESCRIPTION PROPERTY
zsi:auto-association-set-description
    ako zsi:auto-description;
    isa zsi:auto-property-type;

    zid:01H;
    - zsi:name: "Auto Association Set Description";

    zsi:auto-property-generation-rule: "";
.

# AUTO PROPERTY SET NAME PROPERTY
zsi:auto-property-set-name
    ako zsi:auto-name;
    isa zsi:auto-property-type;

    zid:01J;
    - zsi:name: "Auto Property Set Name";

    zsi:auto-property-generation-rule: "\"property-set-\" + this.zid";
.

# AUTO PROPERTY SET DESCRIPTION PROPERTY
zsi:auto-property-set-description
    ako zsi:auto-description;
    isa zsi:auto-property-type;

    zid:01K;
    - zsi:name: "Auto Property Set Description";

    zsi:auto-property-generation-rule: "";
.

# -------------- Special Properties --------------
# These properties are not implemented as simple occurrences in
# topic map form

# NAME PROPERTY
#--- implemented with Name of type tmdm:name
zsi:name
    ako zsi:abstract-name;
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:01L;
    - zsi:name: "Name";
.

# ZID PROPERTY
#--- implemented with subject-identifier with prefix:
#--- http://zutha.net/item/
zsi:zid
    ako zsi:auto-property;
    isa zsi:auto-property-type;

    zid:01M;
    - zsi:name: "ZID";

    zsi:auto-property-generation-rule: "newZID()";

    has-datatype(xsd:string);
    has-unique-value();
.

# IDENTIFIER PROPERTY
#--- implemented with subject-identifier with prefix:
#--- http://psi.zutha.net/
#--- also implemented as occurrence so that it can be reified
zsi:identifier
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:01N;
    - zsi:name: "Identifier";

    has-datatype(xsd:string);
    has-unique-value();
.

# EXTERNAL IDENTIFIER PROPERTY
#--- implemented with subject-identifier
zsi:external-identifier
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:01P;
    - zsi:name: "External Identifier";

    has-datatype(xsd:anyURI);
    has-unique-value();
.

# URI PROPERTY
#--- implemented with subject-locator
zsi:uri
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:01Q;
    - zsi:name: "URI";

    has-datatype(xsd:anyURI);
    has-unique-value();
.

# ***********************************************************
# ***********************************************************
# ******************** Schema Constructs ********************
# ***********************************************************
# ***********************************************************


# ==================== Schema Item Types ====================

# SCHEMA RULE CONTAINER
zsi:schema-rule-container
    ako zsi:entity;
    isa zsi:entity-type;

    zid:01R;
    - zsi:name: "Schema Rule Container";
.

# ROLE COMBINATION
zsi:role-combination
    ako zsi:schema-rule-container;
    isa zsi:entity-type;

    zid:01T;
    - zsi:name: "Role Combination";

    plays-role(zsi:constrained-role-combination,
        zsi:association-has-role-combination-constraint,1,1);
    plays-role(zsi:constrained-role-combination,
        zsi:role-combination-constraint,2,*);
.


# ==================== Schema Association Types ====================

# SCHEMA RULE
zsi:schema-rule
    ako zsi:association;
    isa zsi:association-type;

    zid:01U;
    - zsi:name: "Schema Rule";

    is-abstract();
.

# SCHEMA DECLARATION
zsi:schema-declaration
    ako zsi:schema-rule;
    isa zsi:association-type;

    zid:01V;
    - zsi:name: "Schema Declaration";

    is-abstract();
.

# SCHEMA CONSTRAINT
zsi:schema-constraint
    ako zsi:schema-rule;
    isa zsi:association-type;

    zid:01W;
    - zsi:name: "Schema Constraint";

    is-abstract();
.

# OVERLAP DECLARATION
zsi:overlap-declaration
    ako zsi:schema-declaration;
    isa zsi:association-type;

    zid:01X;
    - zsi:name: "Overlap Declaration";
    - zsi:name: "Overlaps" @zsi:overlapping-item-type;

    has-role(zsi:overlapping-item-type,2,2);
.

# ABSTRACT CONSTRAINT
zsi:abstract-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:01Y;
    - zsi:name: "Abstract Constraint";
    - zsi:name: "Is Abstract" @zsi:constrained-item-type;

    has-role(zsi:constrained-item-type,1,1);
.

# ITEM FIELD CONSTRAINT
zsi:item-field-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:020;
    - zsi:name: "Item Field Constraint";
    - zsi:name: "Has Field" @zsi:constrained-item-type;
    - zsi:name: "Used By Item" @zsi:constrained-field-type;

    is-abstract();
    has-role(zsi:constrained-item-type,1,1);
    has-role(zsi:constrained-field-type,1,1);
    has-property(zsi:card-min,1,1);
    has-property(zsi:card-max,1,1);
.

# ITEM ROLE CONSTRAINT
zsi:item-role-constraint
    ako zsi:item-field-constraint;
    isa zsi:association-type;

    zid:021;
    - zsi:name: "Item Role Constraint";
    - zsi:name: "Plays Role" @zsi:constrained-item-type;
    - zsi:name: "Item Type Plays Role" @zsi:constrained-association-type;
    - zsi:name: "Played By" @zsi:constrained-role-type;

    has-property(zsi:card-min,1,1);
    has-property(zsi:card-max,1,1);
    #--- Constraint must be satisfied, for every instance of this item type
    #--- by the instance itself or one of the instance's supertypes
    has-role(zsi:constrained-item-type,1,1);
    has-role(zsi:constrained-role-type,1,1);
    has-role(zsi:constrained-association-type,1,1);
.

# ITEM PROPERTY CONSTRAINT
zsi:item-property-constraint
    ako zsi:item-field-constraint;
    isa zsi:association-type;

    zid:022;
    - zsi:name: "Item Property Constraint";
    - zsi:name: "Has Property" @zsi:constrained-item-type;
    - zsi:name: "Used By Item" @zsi:constrained-property-type;

    has-role(zsi:constrained-item-type,1,1);
    has-role(zsi:constrained-property-type,1,1);
    has-property(zsi:card-min,1,1);
    has-property(zsi:card-max,1,1);
.

# PROPERTY DATA TYPE CONSTRAINT
zsi:property-datatype-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:023;
    - zsi:name: "Property Data Type Constraint";
    - zsi:name: "Has Datatype" @zsi:constrained-property-type;

    has-property(zsi:datatype,1,1);
    has-role(zsi:constrained-property-type,1,1);
.

# ASSOCIATION ROLE CONSTRAINT
zsi:association-role-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:024;
    - zsi:name: "Association Role Constraint";
    - zsi:name: "Has Role" @zsi:constrained-association-type;
    - zsi:name: "Used By Association" @zsi:constrained-role-type;

    has-property(zsi:card-min,1,1);
    has-property(zsi:card-max,1,1);
    has-role(zsi:constrained-association-type,1,1);
    has-role(zsi:constrained-role-type,1,1);
.

# ROLE COMBINATION CONSTRAINT
zsi:role-combination-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:025;
    - zsi:name: "Role Combination Constraint";
    - zsi:name: "Played by Item Type in combination with" @zsi:constrained-role-type;
    - zsi:name: "Plays Role in combination with" @zsi:constrained-item-type;
    - zsi:name: "Allows role combination" @zsi:constrained-role-combination;

    has-role(zsi:constrained-role-type,1,1);
    has-role(zsi:constrained-item-type,1,1);
    has-role(zsi:constrained-role-combination,1,1);
.
# ASSOCIATION HAS ROLE COMBINATION CONSTRAINT
zsi:association-has-role-combination-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:026;
    - zsi:name: "Association Role Combination Constraint";
    - zsi:name: "Constrains Associations of type" @zsi:constrained-role-combination;
    - zsi:name: "May have Role Combination" @zsi:constrained-association-type;

    has-role(zsi:constrained-role-combination,1,1);
    has-role(zsi:constrained-association-type,1,1);
.

# FIELD HAS SCOPE ITEM TYPE CONSTRAINT
zsi:field-has-scope-item-type-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:027;
    - zsi:name: "Field Has Scope Item Type Constraint";
    - zsi:name: "Has Scope containing Item of Type" @zsi:constrained-field-type;
    - zsi:name: "Field has Scope containing Item of this Type" @zsi:constrained-scope-item-type;

    has-property(zsi:card-min,1,1);
    has-property(zsi:card-max,1,1);
    has-role(zsi:constrained-field-type,1,1);
    has-role(zsi:constrained-scope-item-type,1,1);
.

# ITEM HAS FIELD WITH SCOPE ITEM CONSTRAINT
zsi:item-has-field-with-scope-item-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:028;
    - zsi:name: "Item has Field with Scope Item Constraint";
    - zsi:name: "Has Field(s) with Scope Item" @zsi:constrained-item-type;
    - zsi:name: "Required by Item Type with Scope Item" @zsi:constrained-field-type;
    - zsi:name: "Item has Field(s) with this Scope Item" @zsi:constrained-scope-item;

    has-property(zsi:card-min,1,1);
    has-property(zsi:card-max,1,1);
    has-role(zsi:constrained-item-type,1,1);
    has-role(zsi:constrained-field-type,1,1);
    has-role(zsi:constrained-scope-item,1,1);
.

# REIFIER CONSTRAINT
zsi:reifier-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:029;
    - zsi:name: "Reifier Constraint";
    - zsi:name: "Has Reifier" @zsi:constrained-reifiable-construct-type;

    has-property(zsi:card-min,1,1);
    has-property(zsi:card-max,1,1);
    #--- This specifies both the type of the reified construct
    #--- and the type of the reifying item
    has-role(zsi:constrained-reifiable-construct-type,0,1);
.

# UNIQUE VALUE CONSTRAINT
zsi:unique-value-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:02A;
    - zsi:name: "Unique Value Constraint";
    - zsi:name: "Has Unique Value" @zsi:constrained-property-type;

    has-role(zsi:constrained-property-type,1,1);
.

# REGULAR EXPRESSION CONSTRAINT
zsi:regular-expression-constraint
    ako zsi:schema-constraint;
    isa zsi:association-type;

    zid:02B;
    - zsi:name: "Regular Expression Constraint";
    - zsi:name: "Matches Regexp" @zsi:constrained-property-type;

    has-property(zsi:regexp,1,1);
    has-role(zsi:constrained-property-type,1,1);
.

# ==================== Schema Role Types ====================

# OVERLAPPING ITEM TYPE
zsi:overlapping-item-type
    ako zsi:role;
    isa zsi:role-type;

    zid:02C;
    - zsi:name: "Overlapping Item Type";
    - zsi:name: "Other Item Type" @zsi:overlapping-item-type;
.

# CONSTRAINED ITEM TYPE
zsi:constrained-item-type
    ako zsi:role;
    isa zsi:role-type;

    zid:02D;
    - zsi:name: "Constrained Item Type";
.

# CONSTRAINED REIFIABLE TYPE
zsi:constrained-reifiable-construct-type
    ako zsi:role;
    isa zsi:role-type;

    zid:02E;
    - zsi:name: "Constrained Reifiable Type";
.

# CONSTRAINED ROLE TYPE
zsi:constrained-role-type
    ako zsi:role;
    isa zsi:role-type;

    zid:02F;
    - zsi:name: "Constrained Role Type";
.

# CONSTRAINED FIELD
zsi:constrained-field-type
    ako zsi:role;
    isa zsi:role-type;

    zid:02G;
    - zsi:name: "Constrained Field Type";
.

# CONSTRAINED ASSOCIATION TYPE
zsi:constrained-association-type
    ako zsi:role;
    isa zsi:role-type;

    zid:02H;
    - zsi:name: "Constrained Association Type";
.

# CONSTRAINED PROPERTY TYPE
zsi:constrained-property-type
    ako zsi:role;
    isa zsi:role-type;

    zid:02J;
    - zsi:name: "Constrained Property Type";
.

# CONSTRAINED SCOPE ITEM
zsi:constrained-scope-item
    ako zsi:role;
    isa zsi:role-type;

    zid:02K;
    - zsi:name: "Constrained Scope Item";
.

# CONSTRAINED SCOPE ITEM TYPE
zsi:constrained-scope-item-type
    ako zsi:role;
    isa zsi:role-type;

    zid:02L;
    - zsi:name: "Constrained Scope Item Type";
.

# CONSTRAINED ROLE COMBINATION
zsi:constrained-role-combination
    ako zsi:role;
    isa zsi:role-type;

    zid:02M;
    - zsi:name: "Constrained Role Combination";
.

# ALLOWED REIFIER
zsi:allowed-reifier
    ako zsi:role;
    isa zsi:role-type;

    zid:02N;
    - zsi:name: "Allowed Reifier";
.


# ==================== Schema Property Types ====================

# REGEXP
zsi:regexp
    ako zsi:pmodifiable-roperty;
    isa zsi:modifiable-property-type;

    zid:02P;
    - zsi:name: "Regular Expression";
    - zsi:name: "regexp" @zsi:constrained-item-type;

    has-datatype(xsd:string);
    tmcl:regexp;
.

# DATA TYPE
zsi:datatype
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:02Q;
    - zsi:name: "Datatype";

    has-datatype(xsd:anyURI);
.

# MIN CARDINALITY
zsi:card-min
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:02R;
    tmcl:card-min;
    - zsi:name: "Min Cardinality";
    - zsi:name: "Min" @zsi:constrained-item-type;
    
    has-datatype(xsd:integer);
.

# MAX CARDINALITY
zsi:card-max
    ako zsi:modifiable-property;
    isa zsi:modifiable-property-type;

    zid:02T;
    tmcl:card-max;
    - zsi:name: "Max Cardinality";
    - zsi:name: "Max" @zsi:constrained-item-type;

    has-datatype(iso:ctm-integer);
.


# ==================== Topic Map Implementation Constructs ====================

# -------------- Constructs to emulate Field Set reification --------------

# FIELD SET REIFICATION ASSOCIATION
ztm:field-set-reification
    isa zsi:association-type;

    - zsi:name: "Field Set Reification";

    has-role(ztm:field-set-reifier,1,1);
    has-role(ztm:parent-item-of-field-set,1,1);
    role-played-by(ztm:parent-item-of-field-set, zsi:item,0,*);
    has-role(ztm:field-type-of-field-set,1,1);
.

# PROPERTY SET REIFICATION ASSOCIATION
ztm:property-set-reification
    ako ztm:field-set-reification;
    isa zsi:association-type;

    - zsi:name: "Property Set Reification";

    role-played-by(ztm:field-set-reifier, zsi:property-set,1,1);
    role-played-by(ztm:field-type-of-field-set, zsi:property-type,0,*);
.

# ASSOCIATION SET REIFICATION ASSOCIATION
ztm:association-set-reification
    ako ztm:field-set-reification;
    isa zsi:association-type;

    - zsi:name: "Association Set Reification";

    role-played-by(ztm:field-set-reifier, zsi:association-set,1,1);
    role-played-by(ztm:field-type-of-field-set, zsi:association-type,0,*);
    has-role(ztm:parent-role-of-association-set,1,1);
    role-played-by(ztm:parent-role-of-association-set, zsi:role-type,0,*);
.

# FIELD SET REIFIER
ztm:field-set-reifier
    isa zsi:role-type;

    - zsi:name: "Field Set Reifier";
.

# PARENT ITEM OF FIELD SET
ztm:parent-item-of-field-set
    isa zsi:role-type;

    - zsi:name: "Parent Item of Field Set";
.

# FIELD TYPE OF FIELD SET
ztm:field-type-of-field-set
    isa zsi:role-type;

    - zsi:name: "Field Type of Field Set";
.

# PARENT ROLE OF ASSOCIATION SET
ztm:parent-role-of-association-set
    isa zsi:role-type;

    - zsi:name: "Parent Role of Association Set";
.
