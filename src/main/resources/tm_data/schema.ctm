%prefix zid http://zutha.net/item/
%prefix zsi http://psi.zutha.net/
%prefix zdt http://psi.datatype.zutha.net/
%prefix ztm http://psi.zutha.net/topicmap/

%prefix tmcl http://psi.topicmaps.org/tmcl/
%prefix tmdm http://psi.topicmaps.org/iso13250/model/
%prefix xsd http://www.w3.org/2001/XMLSchema#
%prefix iso http://psi.topicmaps.org/iso13250/

%prefix zsi http://psi.zutha.net/
%prefix ztm http://psi.zutha.net/topicmap/

# ==================== General Purpose Templates ====================

# ITEM HAS TRAIT
def has-trait($item, $trait)
    ?assoc isa zsi:item-has-trait;
    .
    zsi:item-has-trait(
        zsi:item: $item,
        zsi:trait: $trait
    ) ~ ?assoc
    #topic map implementation
    ?anon isa ztm:anonymous-topic;
        ako $trait.
    $item isa ?anon.
    ztm:anonymous-topic-link(
        ztm:reified-zdm-association: ?assoc,
        ztm:anonymous-topic: ?anon
    )
end

# ITEM TYPE IMPLEMENTS INTERFACE
def implements($itemType, $interface)
    ?assoc isa zsi:item-type-implements-interface;
    .
    zsi:item-type-implements-interface(
        zsi:item-type: $itemType,
        zsi:interface: $interface
    ) ~ ?assoc

    #topic map implementation
    ?anon isa ztm:anonymous-topic;
        ako $interface.
    $itemType ako ?anon.
    ztm:anonymous-topic-link(
        ztm:reified-zdm-association: ?assoc,
        ztm:anonymous-topic: ?anon
    )
end

# ITEM PROPERTY
def property($item, $propType, $value, $reifierZid)
    $reifierZid isa $propType.

    $item
    $propType: $value ~ $reifierZid.
end
# ITEM PROPERTY WITH PERMISSION
def property($item, $propType, $value, $reifierZid, $permLevel)
    $reifierZid isa $propType;
        zsi:permission-level: $permLevel.

    $item
    $propType: $value ~ $reifierZid.
end


# IDENTIFIER
def identifier($item, $uri, $reifierZid)
    $item $uri.
    property($item, zsi:identifier, $uri, $reifierZid)
end
def identifier($item, $uri, $reifierZid, $permLevel)
    $item $uri.
    property($item, zsi:identifier, $uri, $reifierZid, $permLevel)
end

# EXTERNAL IDENTIFIER
def external-identifier($item, $uri, $reifierZid)
    $item $uri.
    property($item, zsi:external-identifier, $uri, $reifierZid)
end
def external-identifier($item, $uri, $reifierZid, $permLevel)
    $item $uri.
    property($item, zsi:external-identifier, $uri, $reifierZid, $permLevel)
end

# ==================== Schema Templates ====================

# ABSTRACT CONSTRAINT
def is-abstract($type)
    ?assoc isa zsi:abstract-constraint;
    .
    zsi:abstract-constraint(
        zsi:type: $type
    ) ~ ?assoc
end

# ITEM TYPE HAS ROOT ITEM CONSTRAINT
def root-of($rootItem, $type)
    ?assoc isa zsi:item-type-has-root-item-constraint;
    .
    zsi:item-type-has-root-item-constraint(
        zsi:root-item: $rootItem,
        zsi:type: $type
    ) ~ ?assoc
end
def has-root($type, $rootItem)
    root-of($rootItem, $type)
end

# ITEM TYPE TRAIT DECLARATION
def may-have-trait($itemType, $trait)
    ?assoc isa zsi:item-type-trait-declaration;
    .
    zsi:item-type-role-declaration(
        zsi:item-type: $itemType,
        zsi:trait: $role
    ) ~ ?assoc
end

# PROPERTY DECLARATION
def has-property($declarer, $propType, $min, $max)
    ?assoc isa zsi:property-declaration;
        zsi:property-card-min: $min;
        zsi:property-card-max: $max;
    .
    zsi:property-declaration(
        zsi:property-declarer: $declarer,
        zsi:property-type: $propType
    ) ~ ?assoc
end

# ASSOCIATION FIELD DECLARATION
def plays-role($declarer, $role, $assocType, $min, $max)
    ?assoc isa zsi:association-field-declaration;
        zsi:association-card-min: $min;
        zsi:association-card-max: $max;
    .
    zsi:association-field-declaration(
        zsi:association-field-declarer: $declarer,
        zsi:role: $role,
        zsi:association-type: $assocType
    ) ~ ?assoc
end

# ASSOCIATION ROLE CONSTRAINT
def has-role($assocType, $role, $min, $max)
    ?assoc isa zsi:association-role-constraint;
        zsi:role-card-min: $min;
        zsi:role-card-max: $max;
    .
    zsi:association-role-constraint(
        zsi:association-type: $assocType,
        zsi:role: $role
    ) ~ ?assoc
end

# ROLE COMBINATION CONSTRAINT
def role-combination($assocType,
        $role1,$itemType1,$role2,$itemType2)
    ?combo isa zsi:role-combination;
    .
    zsi:association-has-role-combination-constraint(
        zsi:role-combination: ?combo,
        zsi:association-type: $assocType
    )
    zsi:role-combination-constraint(
        zsi:role-combination: ?combo,
        zsi:role: $role1,
        zsi:item-type: $itemType1
    )
    zsi:role-combination-constraint(
        zsi:role-combination: ?combo,
        zsi:role: $role2,
        zsi:item-type: $itemType2
    )
end

# FIELD HAS SCOPE ITEM CONSTRAINT
def has-scope-item($fieldType, $scopeItem, $min, $max)
    ?assoc isa zsi:field-has-scope-item-constraint;
        zsi:scope-item-card-min: $min;
        zsi:scope-item-card-max: $max;
    .
    zsi:field-has-scope-item-constraint(
        zsi:field-type: $fieldType,
        zsi:scope-item: $scopeItem
    ) ~ ?assoc
end

# FIELD HAS SCOPE ITEM TYPE CONSTRAINT
def has-scope-item-type($fieldType, $scopeItemType, $min, $max)
    ?assoc isa zsi:field-has-scope-item-type-constraint;
        zsi:scope-item-type-card-min: $min;
        zsi:scope-item-type-card-max: $max;
    .
    zsi:field-has-scope-item-type-constraint(
        zsi:field-type: $fieldType,
        zsi:scope-item-type: $scopeItemType
    ) ~ ?assoc
end

# FIELD WITH SCOPE ITEM DECLARATION
def has-scope-item($declarer, $fieldType, $scopeItem, $min, $max)
    ?assoc isa zsi:field-with-scope-item-declaration;
        zsi:field-card-min: $min;
        zsi:field-card-max: $max;
    .
    zsi:field-with-scope-item-declaration(
        zsi:field-declarer: $declarer,
        zsi:field-type: $fieldType,
        zsi:scope-item: $scopeItem
    ) ~ ?assoc
end

# FIELD WITH SCOPE ITEM TYPE DECLARATION
def has-scope-item-type($declarer, $fieldType, $scopeItemType, $min, $max)
    ?assoc isa zsi:field-with-scope-item-type-declaration;
        zsi:field-card-min: $min;
        zsi:field-card-max: $max;
    .
    zsi:field-with-scope-item-type-declaration(
        zsi:field-declarer: $declarer,
        zsi:field-type: $fieldType,
        zsi:scope-item-type: $scopeItemType
    ) ~ ?assoc
end

# UNIQUE VALUE CONSTRAINT
def has-unique-value($propType)
    ?assoc isa zsi:unique-value-constraint;
    .
    zsi:unique-value-constraint(
        zsi:property-type: $propType
    ) ~ ?assoc
end

# PROPERTY DATA TYPE CONSTRAINT
def has-datatype($propType, $dataType)
    ?assoc isa zsi:property-datatype-constraint;
    .
    zsi:property-datatype-constraint(
        zsi:property-type: $propType,
        zsi:datatype: $dataType
    ) ~ ?assoc
end

# REGULAR EXPRESSION CONSTRAINT
def matches-regexp($propType, $regexp)
    ?assoc isa zsi:regular-expression-constraint;
        zsi:regexp: $regexp;
    .
    zsi:regular-expression-constraint(
        zsi:property-type: $propType
    ) ~ ?assoc
end


# ==================== Item Types ====================

# ITEM
zsi:item isa zsi:item-type;
    has-trait(zsi:role);
    has-trait(zsi:property-declarer);
    has-trait(zsi:association-field-declarer);
    ako zsi:item;

    zid:01;
    external-identifier(tmdm:subject, zid:02);
    - zsi:modifiable-name: "Item";

    is-abstract();
    root-of(zsi:item-type);
    has-property(zsi:zid,1,*);
    has-property(zsi:name,1,*);
    has-property(zsi:modifiable-name,0,*);
    has-property(zsi:description,0,1);
    plays-role(zsi:instance,
        zsi:type-instance,1,1);
    plays-role(zsi:item,
        zsi:item-has-trait,0,*);
    plays-role(zsi:scope-item,
        zsi:field-has-scope-item-constraint,0,*);
    plays-role(zsi:scope-item,
        zsi:field-with-scope-item-declaration,0,*);
    plays-role(zsi:item,
        zsi:field-set-permission-level,0,*);
.

# ITEM TYPE
zsi:item-type isa zsi:item-type;
    has-trait(zsi:role);
    ako zsi:type;
    implements(zsi:property-declarer);
    implements(zsi:association-field-declarer);

    zid:03;
    external-identifier(tmcl:topic-type, zid:04);
    - zsi:modifiable-name: "Item Type";

    plays-role(zsi:type,
        zsi:type-instance,0,*);
    plays-role(zsi:supertype,
        zsi:supertype-subtype,0,*);
    plays-role(zsi:subtype,
        zsi:supertype-subtype,1,1);
    plays-role(zsi:item-type,
        zsi:item-type-trait-declaration,0,*);
    plays-role(zsi:item-type,
        zsi:item-type-implements-interface,0,*);
    plays-role(zsi:item-type,
        zsi:item-type-has-root-item-constraint,0,*);
.

# FIELD TYPE INTERFACE
zsi:field-type-interface isa zsi:item-type;
    ako zsi:item-type;
    implements(zsi:trait);

    zid:05;
    - zsi:modifiable-name: "Field Type Interface";
 .

# ENTITY TYPE
zsi:entity-type isa zsi:item-type;
    ako zsi:item-type;

    zid:06;
    - zsi:modifiable-name: "Entity Type";
 .

# INTERFACE
zsi:interface isa zsi:item-type;
    has-trait(zsi:role);
    ako zsi:type;

    zid:07;
    - zsi:modifiable-name: "Interface";

    plays-role(zsi:supertype,
        zsi:supertype-subtype,0,*);
    plays-role(zsi:subtype,
        zsi:supertype-subtype,0,*);
    plays-role(zsi:interface,
        zsi:item-type-implements-interface,0,*);
.

# TRAIT
zsi:trait isa zsi:item-type;
    has-trait(zsi:trait);
    has-trait(zsi:role);
    ako zsi:interface;
    implements(zsi:property-declarer);
    implements(zsi:association-field-declarer);

    zid:08;
    - zsi:modifiable-name: "Trait";

    plays-role(zsi:trait,
        zsi:item-has-trait,0,*);
.

# ROLE
zsi:role isa zsi:item-type;
    ako zsi:item;
    has-trait(zsi:trait);
    has-trait(zsi:role);

    zid:09;
    external-identifier(tmcl:role-type, zid:0A);
    - zsi:modifiable-name: "Role";

    plays-role(zsi:role,
        zsi:association-role-constraint,0,*);
    plays-role(zsi:role,
        zsi:association-field-declaration,0,*);
    plays-role(zsi:role,
        zsi:role-combination-constraint,0,*);
.

# SCHEMA ITEM
zsi:schema-item isa zsi:item-type;
    ako zsi:item;

    zid:0B;
    - zsi:modifiable-name: "Schema Item";

    is-abstract();
.

# ENTITY
zsi:entity isa zsi:entity-type;
    ako zsi:item;

    zid:0C;
    - zsi:modifiable-name: "Real Entity";

    is-abstract();
.

# REAL ENTITY
zsi:real-entity isa zsi:entity-type;
    ako zsi:entity;

    zid:0D;
    - zsi:modifiable-name: "Real Entity";

    is-abstract();
.

# ZUTHA OBJECT
zsi:zutha-object isa zsi:entity-type;
    ako zsi:entity;

    zid:0E;
    - zsi:modifiable-name: "Zutha Object";

    is-abstract();
.


# DATA TYPE
zsi:datatype isa zsi:entity-type;
    ako zsi:entity;
    has-trait(zsi:role);
    
    zid:0F;
    - zsi:modifiable-name: "Data Type";

    is-abstract();
    plays-role(zsi:datatype,
        zsi:property-datatype-constraint,0,*);
.

# ---------------------- kinds of Field Type ----------------------

# FIELD TYPE
zsi:field-type isa zsi:field-type-interface;
    has-trait(zsi:role);
    ako zsi:interface;

    zid:0G;
    - zsi:modifiable-name: "Field Type";

    root-of(zsi:field-type-interface);
    plays-role(zsi:field-type,
        zsi:field-has-scope-item-constraint,0,*);
    plays-role(zsi:field-type,
        zsi:field-has-scope-item-type-constraint,0,*);
    plays-role(zsi:field-type,
        zsi:field-with-scope-item-declaration,0,*);
    plays-role(zsi:field-type,
        zsi:field-with-scope-item-type-declaration,0,*);
    plays-role(zsi:field-type,
        zsi:field-set-permission-level,0,*);
.

# ASSOCIATION TYPE
zsi:association-type isa zsi:field-type-interface;
    has-trait(zsi:role);
    ako zsi:field-type;

    zid:0H;
    external-identifier(tmcl:association-type, zid:0J);
    - zsi:modifiable-name: "Association Type";

    plays-role(zsi:association-type,
        zsi:association-role-constraint,1,*);
    plays-role(zsi:association-type,
        zsi:association-field-declaration,0,*);
    plays-role(zsi:association-type,
        zsi:association-has-role-combination-constraint,0,*);
    plays-role(zsi:association-type,
        zsi:association-field-set-permission-level,0,*);
.

# PROPERTY TYPE
zsi:property-type isa zsi:field-type-interface;
    has-trait(zsi:role);
    ako zsi:field-type;

    zid:0K;
    external-identifier(tmcl:occurrence-type, zid:0L);
    - zsi:modifiable-name: "Property Type";

    plays-role(zsi:property-type,
        zsi:property-declaration,0,*);
    plays-role(zsi:property-type,
        zsi:property-datatype-constraint,1,1);
    plays-role(zsi:property-type,
        zsi:unique-value-constraint,0,1);
    plays-role(zsi:property-type,
        zsi:regular-expression-constraint,0,*);
    plays-role(zsi:property-type,
        zsi:property-set-permission-level,0,*);
.

# AUTO PROPERTY TYPE
zsi:auto-property-type isa zsi:field-type-interface;
    ako zsi:property-type;

    zid:0M;
    - zsi:modifiable-name: "Auto Property Type";

    has-property(zsi:auto-property-generation-rule,1,1);
    has-property(zsi:auto-property-generation-rule-description,0,1);
.

# ---------------------- kinds of Reified Field Type ----------------------

# REIFIED FIELD TYPE
zsi:reified-field-type isa zsi:item-type;
    ako zsi:item-type;
    implements(zsi:field-type);

    zid:0N;
    - zsi:modifiable-name: "Reified Field Type";
    
    has-property(zsi:default-permission-level,0,1);
.

# REIFIED ASSOCIATION TYPE
zsi:reified-association-type isa zsi:item-type;
    ako zsi:reified-field-type;
    implements(zsi:association-type);

    zid:0P;
    - zsi:modifiable-name: "Reified Association Type";
.

# REIFIED PROPERTY TYPE
zsi:reified-property-type isa zsi:item-type;
    ako zsi:reified-field-type;
    implements(zsi:property-type);

    zid:0Q;
    - zsi:modifiable-name: "Reified Property Type";
.

# REIFIED AUTO PROPERTY TYPE
zsi:reified-auto-property-type isa zsi:item-type;
    ako zsi:reified-property-type;
    implements(zsi:auto-property-type);

    zid:0R;
    - zsi:modifiable-name: "Reified Auto Property Type";
.

# ---------------------- Field Types ----------------------

# FIELD
zsi:field isa zsi:field-type;
    zid:0T;
    - zsi:modifiable-name: "Field";

    root-of(zsi:field-type);
.

# ASSOCIATION
zsi:association isa zsi:association-type;
    ako zsi:field;

    zid:0U;
    - zsi:modifiable-name: "Association";

    root-of(zsi:association-type);
.

# PROPERTY
zsi:property isa zsi:property-type;
    ako zsi:field;

    zid:0V;
    - zsi:modifiable-name: "Property";

    root-of(zsi:property-type);
.

# SYSTEM PROPERTY
zsi:system-property isa zsi:property-type;
    ako zsi:property;

    zid:0W;
    - zsi:modifiable-name: "System Property";
.

# HYBRID PROPERTY
zsi:hybrid-property isa zsi:property-type;
    ako zsi:property;

    zid:0X;
    - zsi:modifiable-name: "Hybrid Property";
.

# ---------------------- Reified Field Types ----------------------

# REIFIED FIELD
zsi:reified-field isa zsi:reified-field-type;
    ako zsi:item;
    implements(zsi:permission-controller);

    zid:0Y;
    - zsi:modifiable-name: "Reified Field";

    is-abstract();
    root-of(zsi:reified-field-type);
.

# REIFIED ASSOCIATION
zsi:reified-association isa zsi:reified-association-type;
    ako zsi:reified-field;

    zid:010;
    - zsi:modifiable-name: "Reified Association";

    is-abstract();
    root-of(zsi:reified-association-type);
    has-property(zsi:auto-association-name,1,1);
    has-property(zsi:auto-association-description,1,1);
.

# REIFIED PROPERTY
zsi:reified-property isa zsi:reified-property-type;
    ako zsi:reified-field;

    zid:011;
    - zsi:modifiable-name: "Reified Property";

    is-abstract();
    root-of(zsi:reified-property-type);
    has-property(zsi:auto-property-name,1,1);
    has-property(zsi:auto-property-description,1,1);
.

# ==================== Association Types ====================

# TYPE-INSTANCE
zsi:type-instance isa zsi:association-type;
    ako zsi:association;

    zid:012;
    external-identifier(tmdm:type-instance, zid:013);
    - zsi:modifiable-name: "Type Instance";
    - zsi:modifiable-name: "Instance Of" @zsi:instance;
    - zsi:modifiable-name: "Has Instances" @zsi:type;

    has-role(zsi:type,1,1);
    has-role(zsi:instance,1,1);
.

# SUPERTYPE-SUBTYPE
zsi:supertype-subtype isa zsi:reified-association-type;
    ako zsi:association;

    zid:014;
    external-identifier(tmdm:supertype-subtype, zid:015);
    - zsi:modifiable-name: "Supertype Subtype";
    - zsi:modifiable-name: "Has Supertype" @zsi:subtype;
    - zsi:modifiable-name: "Has Subtypes" @zsi:supertype;

    has-role(zsi:supertype,1,1);
    has-role(zsi:subtype,1,1);
    role-combination(zsi:supertype, zsi:item-type,
        zsi:subtype, zsi:item-type);
    role-combination(zsi:supertype, zsi:interface,
        zsi:subtype, zsi:interface);
.

# ITEM TYPE IMPLEMENTS INTERFACE
zsi:item-type-implements-interface isa zsi:reified-association-type;
    ako zsi:association;

    zid:016;
    - zsi:modifiable-name: "Item Type implements Interface";
    - zsi:modifiable-name: "Implements" @zsi:item-type;
    - zsi:modifiable-name: "Implemented by" @zsi:interface;

    has-role(zsi:item-type,1,1);
    has-role(zsi:interface,1,1);
.

# ITEM HAS TRAIT
zsi:item-has-trait isa zsi:reified-association-type;
    ako zsi:association;

    zid:017;
    - zsi:modifiable-name: "Item Has Trait";
    - zsi:modifiable-name: "Has Trait" @zsi:item;
    - zsi:modifiable-name: "Is Trait of" @zsi:trait;

    has-role(zsi:item,1,1);
    has-role(zsi:trait,1,1);
.

# FIELD SET PERMISSION LEVEL
zsi:field-set-permission-level isa zsi:reified-association-type;
    ako zsi:association;
    implements(zsi:permission-controller);

    zid:018;
    - zsi:modifiable-name: "Field Set Permission Level";
    - zsi:modifiable-name: "Field Set has Permission Level" @zsi:item;
    - zsi:modifiable-name: "Field Sets with this type have Permission Level in Item" @zsi:field-type;

    is-abstract();
    has-role(zsi:item,1,1);
    has-role(zsi:field-type,1,1);
.

# PROPERTY SET PERMISSION LEVEL
zsi:property-set-permission-level isa zsi:reified-association-type;
    ako zsi:field-set-permission-level;

    zid:019;
    - zsi:modifiable-name: "Property Set Permission Level";
    - zsi:modifiable-name: "Property Set has Permission Level" @zsi:item;
    - zsi:modifiable-name: "Item restricts Property Sets of this type" @zsi:property-type;

    has-role(zsi:property-type,1,1);
.

# ASSOCIATION FIELD SET PERMISSION LEVEL
zsi:association-field-set-permission-level isa zsi:reified-association-type;
    ako zsi:field-set-permission-level;

    zid:01A;
    - zsi:modifiable-name: "Association Field Set Permission Level";
    - zsi:modifiable-name: "Association Field Set has Permission Level" @zsi:item;
    - zsi:modifiable-name: "Item restricts Association Field sets of this Association Type" @zsi:association-type;
    - zsi:modifiable-name: "Item restricts Association Field sets of this Role and Association Type" @zsi:role;

    has-role(zsi:association-type,1,1);
    has-role(zsi:role,1,1);
.

# ==================== Roles ====================

# SUPERTYPE
zsi:supertype isa zsi:role;
    zid:01B;
    external-identifier(tmdm:supertype, zid:01C);
    - zsi:modifiable-name: "Supertype";
.

# SUBTYPE
zsi:subtype isa zsi:role;
    zid:01D;
    external-identifier(tmdm:subtype, zid:01E);
    - zsi:modifiable-name: "Subtype";
.

# INSTANCE
zsi:instance isa zsi:role;
    zid:01F;
    external-identifier(tmdm:instance, zid:01G);
    - zsi:modifiable-name: "Instance";
.

# ==================== Property Types ====================

# -------------- System Properties --------------

# ZID
#--- implemented with subject-identifier with prefix:
#--- http://zutha.net/item/
zsi:zid isa zsi:auto-property-type;
    ako zsi:system-property;

    zid:01H;
    - zsi:modifiable-name: "ZID";

    zsi:auto-property-generation-rule: "newZID()";

    has-datatype(xsd:string);
    has-unique-value();
.

# PERMISSION LEVEL
zsi:permission-level isa zsi:property-type;
    ako zsi:system-property;

    zid:01J;
    - zsi:modifiable-name: "Permission Level";

    has-datatype(xsd:nonNegativeInteger);
.

# PERMISSION LOCK LEVEL
zsi:permission-lock-level isa zsi:property-type;
    ako zsi:system-property;

    zid:01K;
    - zsi:modifiable-name: "Permission Lock Level";

    has-datatype(xsd:nonNegativeInteger);
.

# AUTO NAME
#--- implemented with Name of type zsi:auto-name
zsi:auto-name isa zsi:auto-property-type;
    ako zsi:name;
    ako zsi:system-property;

    zid:01L;
    - zsi:modifiable-name: "Auto Name";

    zsi:auto-property-generation-rule: "\"item-\" + this.zid";
.

# AUTO PROPERTY NAME
zsi:auto-property-name isa zsi:auto-property-type;
    ako zsi:auto-name;
    

    zid:01M;
    - zsi:modifiable-name: "Auto Property Name";

    zsi:auto-property-generation-rule: "\"property-\" + this.zid";
.

# AUTO ASSOCIATION NAME
zsi:auto-association-name
    ako zsi:auto-name;
    isa zsi:auto-property-type;

    zid:01N;
    - zsi:modifiable-name: "Auto Association Name";

    zsi:auto-property-generation-rule: "\"association-\" + this.zid";
.

# -------------- Hybrid Properties --------------

# NAME
zsi:name isa zsi:property-type;
    ako zsi:hybrid-property;

    zid:01P;
    - zsi:modifiable-name: "Name";

    has-datatype(xsd:string);
    has-unique-value();
.

# -------------- Reified Properties --------------

# MODIFIABLE NAME
zsi:modifiable-name isa zsi:reified-property-type;
    ako zsi:reified-property;
    implements(zsi:name);

    zid:01Q;
    - zsi:modifiable-name: "Modifiable Name";
.

# DESCRIPTION
zsi:description isa zsi:reified-property-type;
    ako zsi:reified-property;

    zid:01R;
    - zsi:modifiable-name: "Description";

    has-datatype(xsd:string);
.

# AUTO DESCRIPTION
zsi:auto-description isa zsi:reified-auto-property-type;
    ako zsi:description;

    zid:01T;
    - zsi:modifiable-name: "Auto Description";

    is-abstract();
.

# AUTO PROPERTY DESCRIPTION
zsi:auto-property-description isa zsi:reified-auto-property-type;
    ako zsi:auto-description;

    zid:01U;
    - zsi:modifiable-name: "Auto Property Description";

    zsi:auto-property-generation-rule: "";
.

# AUTO ASSOCIATION DESCRIPTION
zsi:auto-association-description isa zsi:reified-auto-property-type;
    ako zsi:auto-description;

    zid:01V;
    - zsi:modifiable-name: "Auto Association Description";

    zsi:auto-property-generation-rule: "";
.

# AUTO PROPERTY GENERATION RULE
zsi:auto-property-generation-rule isa zsi:reified-property-type;
    ako zsi:reified-property;

    zid:01W;
    - zsi:modifiable-name: "Auto Property Generation Rule";
    - zsi:modifiable-name: "Rule" @zsi:auto-property-type;

    has-datatype(xsd:string);
.

# AUTO PROPERTY GENERATION RULE DESCRIPTION
zsi:auto-property-generation-rule-description isa zsi:reified-property-type;
    ako zsi:reified-property;
    

    zid:01X;
    - zsi:modifiable-name: "Auto Property Generation Rule Description";
    - zsi:modifiable-name: "Rule Description" @zsi:auto-property-type;

    has-datatype(xsd:string);
.

# DEFAULT PERMISSION LEVEL
zsi:default-permission-level isa zsi:reified-property-type;
    ako zsi:reified-property;


    zid:01Y;
    - zsi:modifiable-name: "Default Permission Level";

    has-datatype(xsd:nonNegativeInteger);
.

# IDENTIFIER
#--- implemented with subject-identifier with prefix:
#--- http://psi.zutha.net/
#--- also implemented as occurrence so that it can be reified
zsi:identifier isa zsi:reified-property-type;
    ako zsi:reified-property;


    zid:020;
    - zsi:modifiable-name: "Identifier";

    has-datatype(xsd:string);
    has-unique-value();
.

# EXTERNAL IDENTIFIER
#--- implemented with subject-identifier
zsi:external-identifier isa zsi:reified-property-type;
    ako zsi:reified-property;

    zid:021;
    - zsi:modifiable-name: "External Identifier";

    has-datatype(xsd:anyURI);
    has-unique-value();
.

# URI
#--- implemented with subject-locator
zsi:uri isa zsi:reified-property-type;
    ako zsi:reified-property;

    zid:022;
    - zsi:modifiable-name: "URI";

    has-datatype(xsd:anyURI);
    has-unique-value();
.

# ***********************************************************
# ***********************************************************
# ******************** Schema Constructs ********************
# ***********************************************************
# ***********************************************************


# ==================== Schema Item Types ====================

# ROLE COMBINATION
zsi:role-combination isa zsi:item-type;
    ako zsi:schema-item;
    has-trait(zsi:role);

    zid:023;
    - zsi:modifiable-name: "Role Combination";

    plays-role(zsi:role-combination,
        zsi:role-combination-constraint,2,*);
    plays-role(zsi:role-combination,
        zsi:association-has-role-combination-constraint,1,1);
.

# ==================== Schema Traits ====================

# TYPE
zsi:type isa zsi:item-type;
    has-trait(zsi:role);
    ako zsi:item;

    zid:024;
    external-identifier(tmdm:type, zid:025);
    - zsi:modifiable-name: "Type";

    plays-role(zsi:type,
        zsi:abstract-constraint,0,1);
    plays-role(zsi:type,
        zsi:role-combination-constraint,0,*);
    plays-role(zsi:root-item,
        zsi:item-type-has-root-item-constraint,0,1);
    plays-role(zsi:scope-item-type,
        zsi:field-has-scope-item-type-constraint,0,*);
    plays-role(zsi:scope-item-type,
        zsi:field-with-scope-item-type-declaration,0,*);
.

# PERMISSION CONTROLLER
zsi:permission-controller isa zsi:trait;
    zid:026;
    - zsi:modifiable-name: "Permission Controller";

    has-property(zsi:permission-level,0,1);
    has-property(zsi:permission-lock-level,0,1);
.

# FIELD DECLARER
zsi:field-declarer isa zsi:trait;
    has-trait(zsi:role);

    zid:027;
    - zsi:modifiable-name: "Field Declarer";

    is-abstract();
    plays-role(zsi:field-declarer,
        zsi:field-with-scope-item-declaration,0,*);
    plays-role(zsi:field-declarer,
        zsi:field-with-scope-item-type-declaration,0,*);
    plays-role(zsi:field-declarer,
        zsi:field-declaration,0,*);
.

# ASSOCIATION FIELD DECLARER
zsi:association-field-declarer isa zsi:trait;
    has-trait(zsi:role);
    ako zsi:field-declarer;

    zid:028;
    - zsi:modifiable-name: "Association Field Declarer";

    plays-role(zsi:association-field-declarer,
        zsi:association-field-declaration,0,*);
.

# PROPERTY DECLARER
zsi:property-declarer isa zsi:trait;
    has-trait(zsi:role);
    ako zsi:field-declarer;

    zid:029;
    - zsi:modifiable-name: "Property Declarer";

    plays-role(zsi:property-declarer,
        zsi:property-declaration,0,*);
.

# ==================== Schema Association Types ====================

# SCHEMA DECLARATION
zsi:schema-declaration isa zsi:reified-association-type;
    ako zsi:reified-association;

    zid:02A;
    - zsi:modifiable-name: "Schema Declaration";

    is-abstract();
.

# ABSTRACT CONSTRAINT
zsi:abstract-constraint isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02B;
    - zsi:modifiable-name: "Abstract Constraint";
    - zsi:modifiable-name: "Is Abstract" @zsi:type;

    has-role(zsi:type,1,1);
.

# ITEM TYPE HAS ROOT ITEM CONSTRAINT
zsi:item-type-has-root-item-constraint isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02C;
    - zsi:modifiable-name: "Descendants have Type Declaration";
    - zsi:modifiable-name: "Descendants have Type" @zsi:root-item;
    - zsi:modifiable-name: "Has Root Item" @zsi:type;

    has-role(zsi:item-type,1,1);
    has-role(zsi:root-item,1,1);
.

# ITEM TYPE TRAIT DECLARATION
zsi:item-type-trait-declaration isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02D;
    - zsi:modifiable-name: "Item Type Trait Declaration";
    - zsi:modifiable-name: "May have Trait" @zsi:item-type;
    - zsi:modifiable-name: "Allowed Trait of" @zsi:trait;

    has-role(zsi:item-type,1,1);
    has-role(zsi:trait,1,1);
.

# FIELD DECLARATION
zsi:field-declaration isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02E;
    - zsi:modifiable-name: "Field Declaration";
    - zsi:modifiable-name: "Declares Field" @zsi:field-declarer;

    has-role(zsi:field-declarer,1,1);
    has-role(zsi:field-type,1,1);
    has-property(zsi:card-min,1,1);
    has-property(zsi:card-max,1,1);
.

# PROPERTY DECLARATION
zsi:property-declaration isa zsi:reified-association-type;
    ako zsi:field-declaration;

    zid:02F;
    - zsi:modifiable-name: "Property Declaration";
    - zsi:modifiable-name: "Declares Property" @zsi:property-declarer;
    - zsi:modifiable-name: "Declared Property of" @zsi:property-type;

    has-role(zsi:property-declarer,1,1);
    has-role(zsi:property-type,1,1);
    has-property(zsi:property-card-min,1,1);
    has-property(zsi:property-card-max,1,1);
.

# ASSOCIATION FIELD DECLARATION
zsi:association-field-declaration isa zsi:reified-association-type;
    ako zsi:field-declaration;

    zid:02G;
    - zsi:modifiable-name: "Association Field Declaration";
    - zsi:modifiable-name: "Plays Role in Association" @zsi:association-field-declarer;
    - zsi:modifiable-name: "Field Declarer Plays Role" @zsi:association-type;
    - zsi:modifiable-name: "Played By Field Declarer in Association" @zsi:role;

    #--- Constraint must be satisfied, for every instance of this item type
    #--- by the instance itself or one of the instance's supertypes
    has-role(zsi:association-field-declarer,1,1);
    has-role(zsi:role,1,1);
    has-role(zsi:association-type,1,1);
    has-property(zsi:association-card-min,1,1);
    has-property(zsi:association-card-max,1,1);
.

# ASSOCIATION ROLE CONSTRAINT
zsi:association-role-constraint isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02H;
    - zsi:modifiable-name: "Association Role Constraint";
    - zsi:modifiable-name: "Has Role" @zsi:association-type;
    - zsi:modifiable-name: "Takes Part in Association" @zsi:role;

    has-role(zsi:role,1,1);
    has-role(zsi:association-type,1,1);
    has-property(zsi:role-card-min,1,1);
    has-property(zsi:role-card-max,1,1);
.

# ROLE COMBINATION CONSTRAINT
zsi:role-combination-constraint isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02J;
    - zsi:modifiable-name: "Role Combination Constraint";
    - zsi:modifiable-name: "Plays Role in combination with" @zsi:type;
    - zsi:modifiable-name: "Played by Type in combination with" @zsi:role;
    - zsi:modifiable-name: "Allows Role combination" @zsi:role-combination;

    has-role(zsi:type,1,1);
    has-role(zsi:role,1,1);
    has-role(zsi:role-combination,1,1);
.

# ASSOCIATION HAS ROLE COMBINATION CONSTRAINT
zsi:association-has-role-combination-constraint isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02K;
    - zsi:modifiable-name: "Association Has Role Combination Constraint";
    - zsi:modifiable-name: "Constrains Associations of Type" @zsi:role-combination;
    - zsi:modifiable-name: "May Have Role Combination" @zsi:association-type;

    has-role(zsi:association-type,1,1);
    has-role(zsi:role-combination,1,1);
.

# FIELD HAS SCOPE ITEM CONSTRAINT
zsi:field-has-scope-item-constraint isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02L;
    - zsi:modifiable-name: "Field has Scope Item Constraint";
    - zsi:modifiable-name: "Scope contains Item" @zsi:field-type;
    - zsi:modifiable-name: "Field has Scope containing this Item" @zsi:scope-item;

    has-role(zsi:field-type,1,1);
    has-role(zsi:scope-item,1,1);
    has-property(zsi:scope-item-card-min,1,1);
    has-property(zsi:scope-item-card-max,1,1);
.

# FIELD HAS SCOPE ITEM TYPE CONSTRAINT
zsi:field-has-scope-item-type-constraint isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02M;
    - zsi:modifiable-name: "Field Has Scope Item Type Constraint";
    - zsi:modifiable-name: "Scope Contains Item(s) of Type" @zsi:field-type;
    - zsi:modifiable-name: "Field Has Scope Containing Item(s) of this Type" @zsi:scope-item-type;

    has-role(zsi:field-type,1,1);
    has-role(zsi:scope-item-type,1,1);
    has-property(zsi:scope-item-type-card-min,1,1);
    has-property(zsi:scope-item-type-card-max,1,1);
.

# FIELD WITH SCOPE ITEM DECLARATION
zsi:field-with-scope-item-declaration isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02N;
    - zsi:modifiable-name: "Field with Scope Item Declaration";
    - zsi:modifiable-name: "Has Field(s) scoped by Item" @zsi:field-declarer;
    - zsi:modifiable-name: "Used by Item Type, scoped by Item" @zsi:field-type;
    - zsi:modifiable-name: "Item has Field(s) scoped by Item" @zsi:scope-item;

    has-role(zsi:field-declarer,1,1);
    has-role(zsi:field-type,1,1);
    has-role(zsi:scope-item,1,1);
    has-property(zsi:field-card-min,1,1);
    has-property(zsi:field-card-max,1,1);
.

# FIELD WITH SCOPE ITEM TYPE DECLARATION
zsi:field-with-scope-item-type-declaration isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02P;
    - zsi:modifiable-name: "Field with Scope Item Type Declaration";
    - zsi:modifiable-name: "Has Field(s) scoped by Item of Type" @zsi:item-type;
    - zsi:modifiable-name: "Used by Item Type scoped by Item of Type" @zsi:field-type;
    - zsi:modifiable-name: "Item has Field(s) scoped by Item of this Type" @zsi:scope-item-type;

    has-role(zsi:field-declarer,1,1);
    has-role(zsi:field-type,1,1);
    has-role(zsi:scope-item-type,1,1);
    has-property(zsi:field-card-min,1,1);
    has-property(zsi:field-card-max,1,1);
.

# UNIQUE VALUE CONSTRAINT
zsi:unique-value-constraint isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02Q;
    - zsi:modifiable-name: "Unique Value Constraint";
    - zsi:modifiable-name: "Has Unique Value" @zsi:property-type;

    has-role(zsi:property-type,1,1);
.

# PROPERTY DATA TYPE CONSTRAINT
zsi:property-datatype-constraint isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02R;
    - zsi:modifiable-name: "Property Data Type Constraint";
    - zsi:modifiable-name: "Has Datatype" @zsi:property-type;

    has-role(zsi:property-type,1,1);
    has-role(zsi:datatype,1,1);
.

# REGULAR EXPRESSION CONSTRAINT
zsi:regular-expression-constraint isa zsi:reified-association-type;
    ako zsi:schema-declaration;

    zid:02T;
    - zsi:modifiable-name: "Regular Expression Constraint";
    - zsi:modifiable-name: "Matches Regexp" @zsi:property-type;

    has-role(zsi:property-type,1,1);
    has-property(zsi:regexp,1,1);
.

# ==================== Schema Roles ====================

# ROOT ITEM
zsi:root-item isa zsi:role;
    zid:02U;
    - zsi:modifiable-name: "Root Item";
.

# SCOPE ITEM
zsi:scope-item isa zsi:role;
    zid:02V;
    - zsi:modifiable-name: "Scope Item";
.

# SCOPE ITEM TYPE
zsi:scope-item-type isa zsi:role;
    zid:02W;
    - zsi:modifiable-name: "Scope Item Type";
.


# ==================== Schema Property Types ====================

# REGEXP
zsi:regexp isa zsi:reified-property-type;
    ako zsi:pmodifiable-roperty;

    zid:02X;
    - zsi:modifiable-name: "Regular Expression";
    - zsi:modifiable-name: "regexp" @zsi:constrained-item-type;

    has-datatype(xsd:string);
    external-identifier(tmcl:regexp, zid:02Y);
.

# MIN CARDINALITY
zsi:card-min isa zsi:reified-property-type;
    ako zsi:reified-property;

    zid:030;
    external-identifier(tmcl:card-min, zid:031);
    - zsi:modifiable-name: "Min Cardinality";
    - zsi:modifiable-name: "Min" @zsi:constrained-item-type;

    has-datatype(xsd:nonNegativeInteger);
.

# MAX CARDINALITY
zsi:card-max isa zsi:reified-property-type;
    ako zsi:reified-property;

    zid:032;
    external-identifier(tmcl:card-max, zid:033);
    - zsi:modifiable-name: "Max Cardinality";
    - zsi:modifiable-name: "Max" @zsi:constrained-item-type;

    has-datatype(iso:ctm-integer);
.

# ROLE MIN CARDINALITY
zsi:role-card-min
    ako zsi:card-min;
    isa zsi:reified-property-type;

    zid:034;
    - zsi:modifiable-name: "Role Min Cardinality";
.

# ROLE MAX CARDINALITY
zsi:role-card-max isa zsi:reified-property-type;
    ako zsi:card-max;

    zid:035;
    - zsi:modifiable-name: "Role Max Cardinality";
.

# FIELD MIN CARDINALITY
zsi:field-card-min isa zsi:reified-property-type;
    ako zsi:card-min;

    zid:036;
    - zsi:modifiable-name: "Field Min Cardinality";
.

# FIELD MAX CARDINALITY
zsi:association-card-max isa zsi:reified-property-type;
    ako zsi:card-max;

    zid:037;
    - zsi:modifiable-name: "Field Max Cardinality";
.

# ASSOCIATION MIN CARDINALITY
zsi:association-card-min isa zsi:reified-property-type;
    ako zsi:field-card-min;

    zid:038;
    - zsi:modifiable-name: "Association Min Cardinality";
.

# ASSOCIATION MAX CARDINALITY
zsi:association-card-max isa zsi:reified-property-type;
    ako zsi:field-card-max;

    zid:039;
    - zsi:modifiable-name: "Association Max Cardinality";
.

# PROPERTY MIN CARDINALITY
zsi:property-card-min isa zsi:reified-property-type;
    ako zsi:field-card-min;

    zid:03A;
    - zsi:modifiable-name: "Property Min Cardinality";
.

# PROPERTY MAX CARDINALITY
zsi:property-card-max isa zsi:reified-property-type;
    ako zsi:field-card-max;

    zid:03B;
    - zsi:modifiable-name: "Property Max Cardinality";
.

# REIFIER MIN CARDINALITY
zsi:reifier-card-min isa zsi:reified-property-type;
    ako zsi:card-min;

    zid:03C;
    - zsi:modifiable-name: "Reifier Min Cardinality";
.

# REIFIER MAX CARDINALITY
zsi:reifier-card-max isa zsi:reified-property-type;
    ako zsi:card-max;

    zid:03D;
    - zsi:modifiable-name: "Reifier Max Cardinality";
.

# SCOPE ITEM MIN CARDINALITY
zsi:scope-item-card-min isa zsi:reified-property-type;
    ako zsi:card-min;

    zid:03E;
    - zsi:modifiable-name: "Scope Item Min Cardinality";
.

# SCOPE ITEM MAX CARDINALITY
zsi:scope-item-card-max isa zsi:reified-property-type;
    ako zsi:card-max;

    zid:03F;
    - zsi:modifiable-name: "Scope Item Max Cardinality";
.

# SCOPE ITEM TYPE MIN CARDINALITY
zsi:scope-item-type-card-min isa zsi:reified-property-type;
    ako zsi:card-min;

    zid:03G;
    - zsi:modifiable-name: "Scope Item Type Min Cardinality";
.

# SCOPE ITEM TYPE MAX CARDINALITY
zsi:scope-item-type-card-max isa zsi:reified-property-type;
    ako zsi:card-max;

    zid:03H;
    - zsi:modifiable-name: "Scope Item Type Max Cardinality";
.

# ==================== Data Types ====================

# STRING
zsi:string isa zsi:datatype;

    zid:03J;
    external-identifier(xsd:string, zid:03K);
    - zsi:modifiable-name: "String";
.

# ANY URI
zsi:any-uri isa zsi:datatype;

    zid:03L;
    external-identifier(xsd:anyURI, zid:03M);
    - zsi:modifiable-name: "String";
.

# NON-NEGATIVE INTEGER
zsi:non-negative-integer isa zsi:datatype;

    zid:03N;
    external-identifier(xsd:nonNegativeInteger, zid:03P);
    - zsi:modifiable-name: "Non-Negative Integer";
.

# UNBOUNDED NON-NEGATIVE INTEGER
zsi:unbounded-non-negative-integer isa zsi:datatype;

    zid:03Q;
    external-identifier(iso:ctm-integer, zid:03R);
    - zsi:modifiable-name: "Unbounded Non-Negative Integer";
.

# ==================== Topic Map Implementation Constructs ====================

# ASSOCIATION: ANONYMOUS TOPIC LINK
#--- An association between a ZDM reified association
#--- and an anonymous topic.
#--- Used for locating the anonymous topic when the ZDM association
#--- is deleted so the anonymous topic can also be deleted
ztm:anonymous-topic-link.

# TOPIC,ROLE: ANONYMOUS TOPIC
#--- A topic that doesn't exist in the ZDM.
#--- May be used for implementing ZDM concepts in TM friendly form
ztm:anonymous-topic.

# ROLE: REIFIED ZDM ASSOCIATION
ztm:reified-zdm-association.




