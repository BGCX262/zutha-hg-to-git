%prefix zsi http://psi.zutha.net/
%prefix ztm http://psi.topicmap.zutha.net/

# ==================== General Purpose Templates ====================

# ITEM PROPERTY
def property($item, $propType, $value)
    $item
    $propType: $value.
end

# ITEM PROPERTY WITH PERMISSION
def property($item, $propType, $value, $permLevel)
    ?restrReifier isa ztm:restriction-association-reifier;
        ztm:permission-level: $permLevel.
    ?propReifier isa ztm:property-reifier.
    ztm:field-permission(
        ztm:restricted-field: $propReifier
    ) ~ ?restrReifier

    $item
    $propType: $value ~ ?propReifier.
end

# ITEM PROPERTY WITH DOMAIN-SPECIFIC PERMISSION
def property($item, $propType, $value, $permLevel, $permDomain)
    ?restrReifier isa ztm:restriction-association-reifier;
        ztm:permission-level: $permLevel.
    ?propReifier isa ztm:property-reifier.
    ztm:field-permission(
        ztm:restricted-field: $propReifier,
        zsi:reputation-domain: $permDomain
    ) ~ ?restrReifier
    
    $item
    $propType: $value ~ ?propReifier.
end

# ASSOCIATION PROPERTY

# ASSOCIATION PROPERTY WITH PERMISSION

# ASSOCIATION PROPERTY WITH DOMAIN-SPECIFIC PERMISSION


# ==================== Schema Templates ====================

# OVERLAP DECLARATION
def overlaps($itemType1, $itemType2)
  zsi:overlap-declaration(zsi:overlapping-item-type : $itemType1,
    zsi:overlapping-item-type : $itemType2)
end

# ABSTRACT CONSTRAINT
def is-abstract($itemType)
    zsi:abstract-constraint(zsi:constrained-item-type: $itemType)
end

# ITEM PROPERTY CONSTRAINT
def has-property($itemType, $propType, $min, $max)
    ?reifier isa ztm:association-reifier;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:item-property-constraint(
        zsi:constrained-item-type: $itemType,
        zsi:constrained-property-type: $propType
    ) ~ ?reifier
end

# ASSOCIATION PROPERTY CONSTRAINT
def assoc-has-property($assocType, $propType, $min, $max)
    ?reifier isa ztm:association-reifier;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:association-property-constraint(
        zsi:constrained-association-type: $assocType,
        zsi:constrained-property-type: $propType
    ) ~ ?reifier
end

# ASSOCIATION ROLE CONSTRAINT
def has-role($assocType, $roleType, $min, $max)
    ?reifier isa ztm:association-reifier;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:item-role-constraint(
        zsi:constrained-association-type: assocType,
        zsi:constrained-role: $roleType
    ) ~ ?reifier
end

# ITEM ROLE CONSTRAINT
def plays-role($itemType, $roleType, $assocType, $min, $max)
    ?reifier isa ztm:association-reifier;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:item-role-constraint(
        zsi:constrained-item-type: $itemType,
        zsi:constrained-role: $roleType,
        zsi:constrained-association-type: $assocType
    ) ~ ?reifier
end

# FIELD HAS SCOPE ITEM TYPE CONSTRAINT
def has-scope($fieldType, $itemType, $min, $max)
    ?reifier isa ztm:association-reifier;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:field-has-scope-item-type-constraint(
        zsi:constrained-field-type: $fieldType,
        zsi:constrained-scope-item-type: $itemType
    ) ~ ?reifier
end

# ITEM REQUIRES FIELD WITH SCOPE ITEM CONSTRAINT
def requires-scope($itemType, $fieldType, $item, $min, $max)
    ?reifier isa ztm:association-reifier;
        zsi:card-min: $min;
        zsi:card-max: $max;
    .
    zsi:item-requires-field-with-scope-item-constraint(
        zsi:constrained-item-type: $itemType,
        zsi:constrained-field-type: $fieldType,
        zsi:constrained-scope-item: $item
    ) ~ ?reifier
end

# PROPERTY DATA TYPE CONSTRAINT
def has-datatype($propType, $dataType)
    ?reifier isa ztm:association-reifier;
        zsi:datatype: $dataType;
    .
    zsi:property-datatype-constraint(
        zsi:constrained-property-type: $propType
    ) ~ ?reifier
end

# UNIQUE VALUE CONSTRAINT
def has-unique-value($propType)
    zsi:unique-value-constraint(zsi:constrained-property-type: $propType)
end

# REGULAR EXPRESSION CONSTRAINT
def matches-regexp($propType, $regexp)
    ?reifier isa ztm:association-reifier;
        zsi:regexp: $regexp;
    .
    zsi:regular-expression-constraint(
        zsi:constrained-property-type: $propType
    ) ~ ?reifier
end
